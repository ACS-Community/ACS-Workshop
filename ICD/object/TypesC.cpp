// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "TypesC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "TypesC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_TYPES_IMAGETYPE_CS_)
#define _TYPES_IMAGETYPE_CS_

TYPES::ImageType::ImageType (void)
{}

TYPES::ImageType::ImageType (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

TYPES::ImageType::ImageType (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

TYPES::ImageType::ImageType (
    const ImageType &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

TYPES::ImageType::~ImageType (void)
{}

void TYPES::ImageType::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ImageType * _tao_tmp_pointer =
    static_cast<ImageType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_TYPES_ImageType_GUARD
#define _TAO_TYPECODE_TYPES_ImageType_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TYPES_ImageType_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TYPES_ImageType_0 =
        &TYPES_ImageType_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TYPES_ImageType_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TYPES_ImageType (
    ::CORBA::tk_alias,
    "IDL:acsws/TYPES/ImageType:1.0",
    "ImageType",
    &TAO::TypeCode::tc_TYPES_ImageType_0);
  

namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_ImageType =
    &_tao_tc_TYPES_ImageType;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_TYPES_IMAGELIST_CS_)
#define _TYPES_IMAGELIST_CS_

TYPES::ImageList::ImageList (void)
{}

TYPES::ImageList::ImageList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ImageType
      > (max)
{}

TYPES::ImageList::ImageList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TYPES::ImageType * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ImageType
      >
    (max, length, buffer, release)
{}

TYPES::ImageList::ImageList (
    const ImageList &seq)
  : ::TAO::unbounded_value_sequence<
        ImageType
      > (seq)
{}

TYPES::ImageList::~ImageList (void)
{}

void TYPES::ImageList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ImageList * _tao_tmp_pointer =
    static_cast<ImageList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_TYPES_ImageList_GUARD
#define _TAO_TYPECODE_TYPES_ImageList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TYPES_ImageList_0 (
          ::CORBA::tk_sequence,
          &TYPES::_tc_ImageType,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TYPES_ImageList_0 =
        &TYPES_ImageList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TYPES_ImageList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TYPES_ImageList (
    ::CORBA::tk_alias,
    "IDL:acsws/TYPES/ImageList:1.0",
    "ImageList",
    &TAO::TypeCode::tc_TYPES_ImageList_0);
  

namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_ImageList =
    &_tao_tc_TYPES_ImageList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TYPES_Position[] =
      {
        { "az", &CORBA::_tc_double },
        { "el", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TYPES_Position (
  ::CORBA::tk_struct,
  "IDL:acsws/TYPES/Position:1.0",
  "Position",
  _tao_fields_TYPES_Position,
  2);


namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_Position =
    &_tao_tc_TYPES_Position;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
TYPES::Position::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Position *_tao_tmp_pointer =
    static_cast<Position *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TYPES_Target[] =
      {
        { "tid", &CORBA::_tc_long },
        { "coordinates", &TYPES::_tc_Position },
        { "expTime", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TYPES_Target (
  ::CORBA::tk_struct,
  "IDL:acsws/TYPES/Target:1.0",
  "Target",
  _tao_fields_TYPES_Target,
  3);


namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_Target =
    &_tao_tc_TYPES_Target;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
TYPES::Target::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Target *_tao_tmp_pointer =
    static_cast<Target *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_TYPES_TARGETLIST_CS_)
#define _TYPES_TARGETLIST_CS_

TYPES::TargetList::TargetList (void)
{}

TYPES::TargetList::TargetList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Target
      > (max)
{}

TYPES::TargetList::TargetList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TYPES::Target * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Target
      >
    (max, length, buffer, release)
{}

TYPES::TargetList::TargetList (
    const TargetList &seq)
  : ::TAO::unbounded_value_sequence<
        Target
      > (seq)
{}

TYPES::TargetList::~TargetList (void)
{}

void TYPES::TargetList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TargetList * _tao_tmp_pointer =
    static_cast<TargetList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_TYPES_TargetList_GUARD
#define _TAO_TYPECODE_TYPES_TargetList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TYPES_TargetList_0 (
          ::CORBA::tk_sequence,
          &TYPES::_tc_Target,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TYPES_TargetList_0 =
        &TYPES_TargetList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TYPES_TargetList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TYPES_TargetList (
    ::CORBA::tk_alias,
    "IDL:acsws/TYPES/TargetList:1.0",
    "TargetList",
    &TAO::TypeCode::tc_TYPES_TargetList_0);
  

namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_TargetList =
    &_tao_tc_TYPES_TargetList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TYPES_Proposal[] =
      {
        { "pid", &CORBA::_tc_long },
        { "targets", &TYPES::_tc_TargetList },
        { "status", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TYPES_Proposal (
  ::CORBA::tk_struct,
  "IDL:acsws/TYPES/Proposal:1.0",
  "Proposal",
  _tao_fields_TYPES_Proposal,
  3);


namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_Proposal =
    &_tao_tc_TYPES_Proposal;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
TYPES::Proposal::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Proposal *_tao_tmp_pointer =
    static_cast<Proposal *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_TYPES_PROPOSALLIST_CS_)
#define _TYPES_PROPOSALLIST_CS_

TYPES::ProposalList::ProposalList (void)
{}

TYPES::ProposalList::ProposalList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Proposal
      > (max)
{}

TYPES::ProposalList::ProposalList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TYPES::Proposal * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Proposal
      >
    (max, length, buffer, release)
{}

TYPES::ProposalList::ProposalList (
    const ProposalList &seq)
  : ::TAO::unbounded_value_sequence<
        Proposal
      > (seq)
{}

TYPES::ProposalList::~ProposalList (void)
{}

void TYPES::ProposalList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ProposalList * _tao_tmp_pointer =
    static_cast<ProposalList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_TYPES_ProposalList_GUARD
#define _TAO_TYPECODE_TYPES_ProposalList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TYPES_ProposalList_0 (
          ::CORBA::tk_sequence,
          &TYPES::_tc_Proposal,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TYPES_ProposalList_0 =
        &TYPES_ProposalList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TYPES_ProposalList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TYPES_ProposalList (
    ::CORBA::tk_alias,
    "IDL:acsws/TYPES/ProposalList:1.0",
    "ProposalList",
    &TAO::TypeCode::tc_TYPES_ProposalList_0);
  

namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_ProposalList =
    &_tao_tc_TYPES_ProposalList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TYPES_RGB[] =
      {
        { "red", &CORBA::_tc_long },
        { "green", &CORBA::_tc_long },
        { "blue", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TYPES_RGB (
  ::CORBA::tk_struct,
  "IDL:acsws/TYPES/RGB:1.0",
  "RGB",
  _tao_fields_TYPES_RGB,
  3);


namespace TYPES
{
  ::CORBA::TypeCode_ptr const _tc_RGB =
    &_tao_tc_TYPES_RGB;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
TYPES::RGB::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RGB *_tao_tmp_pointer =
    static_cast<RGB *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::ImageType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::ImageType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::ImageType>::insert_copy (
          _tao_any,
          ::TYPES::ImageType::_tao_any_destructor,
          ::TYPES::_tc_ImageType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TYPES::ImageType *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::ImageType>::insert (
        _tao_any,
        ::TYPES::ImageType::_tao_any_destructor,
        ::TYPES::_tc_ImageType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::ImageType *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::ImageType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::ImageType *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::ImageType>::extract (
          _tao_any,
          ::TYPES::ImageType::_tao_any_destructor,
          ::TYPES::_tc_ImageType,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TYPES::ImageType &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::ImageType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::ImageType>::insert_copy (
        _tao_any,
        TYPES::ImageType::_tao_any_destructor,
        TYPES::_tc_ImageType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TYPES::ImageType *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::ImageType>::insert (
      _tao_any,
      TYPES::ImageType::_tao_any_destructor,
      TYPES::_tc_ImageType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TYPES::ImageType *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::ImageType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TYPES::ImageType *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::ImageType>::extract (
        _tao_any,
        TYPES::ImageType::_tao_any_destructor,
        TYPES::_tc_ImageType,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::ImageList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::ImageList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::ImageList>::insert_copy (
          _tao_any,
          ::TYPES::ImageList::_tao_any_destructor,
          ::TYPES::_tc_ImageList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TYPES::ImageList *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::ImageList>::insert (
        _tao_any,
        ::TYPES::ImageList::_tao_any_destructor,
        ::TYPES::_tc_ImageList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::ImageList *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::ImageList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::ImageList *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::ImageList>::extract (
          _tao_any,
          ::TYPES::ImageList::_tao_any_destructor,
          ::TYPES::_tc_ImageList,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TYPES::ImageList &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::ImageList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::ImageList>::insert_copy (
        _tao_any,
        TYPES::ImageList::_tao_any_destructor,
        TYPES::_tc_ImageList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TYPES::ImageList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::ImageList>::insert (
      _tao_any,
      TYPES::ImageList::_tao_any_destructor,
      TYPES::_tc_ImageList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TYPES::ImageList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::ImageList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TYPES::ImageList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::ImageList>::extract (
        _tao_any,
        TYPES::ImageList::_tao_any_destructor,
        TYPES::_tc_ImageList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::Position &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::Position *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::Position>::insert_copy (
          _tao_any,
          ::TYPES::Position::_tao_any_destructor,
          ::TYPES::_tc_Position,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TYPES::Position *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::Position>::insert (
        _tao_any,
        ::TYPES::Position::_tao_any_destructor,
        ::TYPES::_tc_Position,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::Position *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::Position *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::Position *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::Position>::extract (
          _tao_any,
          ::TYPES::Position::_tao_any_destructor,
          ::TYPES::_tc_Position,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TYPES::Position &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::Position *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::Position>::insert_copy (
      _tao_any,
      TYPES::Position::_tao_any_destructor,
      TYPES::_tc_Position,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TYPES::Position *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::Position>::insert (
    _tao_any,
    TYPES::Position::_tao_any_destructor,
    TYPES::_tc_Position,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TYPES::Position *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::Position *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TYPES::Position *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::Position>::extract (
      _tao_any,
      TYPES::Position::_tao_any_destructor,
      TYPES::_tc_Position,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::Target &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::Target *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::Target>::insert_copy (
          _tao_any,
          ::TYPES::Target::_tao_any_destructor,
          ::TYPES::_tc_Target,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TYPES::Target *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::Target>::insert (
        _tao_any,
        ::TYPES::Target::_tao_any_destructor,
        ::TYPES::_tc_Target,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::Target *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::Target *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::Target *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::Target>::extract (
          _tao_any,
          ::TYPES::Target::_tao_any_destructor,
          ::TYPES::_tc_Target,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TYPES::Target &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::Target *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::Target>::insert_copy (
      _tao_any,
      TYPES::Target::_tao_any_destructor,
      TYPES::_tc_Target,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TYPES::Target *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::Target>::insert (
    _tao_any,
    TYPES::Target::_tao_any_destructor,
    TYPES::_tc_Target,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TYPES::Target *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::Target *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TYPES::Target *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::Target>::extract (
      _tao_any,
      TYPES::Target::_tao_any_destructor,
      TYPES::_tc_Target,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::TargetList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::TargetList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::TargetList>::insert_copy (
          _tao_any,
          ::TYPES::TargetList::_tao_any_destructor,
          ::TYPES::_tc_TargetList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TYPES::TargetList *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::TargetList>::insert (
        _tao_any,
        ::TYPES::TargetList::_tao_any_destructor,
        ::TYPES::_tc_TargetList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::TargetList *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::TargetList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::TargetList *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::TargetList>::extract (
          _tao_any,
          ::TYPES::TargetList::_tao_any_destructor,
          ::TYPES::_tc_TargetList,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TYPES::TargetList &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::TargetList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::TargetList>::insert_copy (
        _tao_any,
        TYPES::TargetList::_tao_any_destructor,
        TYPES::_tc_TargetList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TYPES::TargetList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::TargetList>::insert (
      _tao_any,
      TYPES::TargetList::_tao_any_destructor,
      TYPES::_tc_TargetList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TYPES::TargetList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::TargetList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TYPES::TargetList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::TargetList>::extract (
        _tao_any,
        TYPES::TargetList::_tao_any_destructor,
        TYPES::_tc_TargetList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::Proposal &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::Proposal *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::Proposal>::insert_copy (
          _tao_any,
          ::TYPES::Proposal::_tao_any_destructor,
          ::TYPES::_tc_Proposal,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TYPES::Proposal *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::Proposal>::insert (
        _tao_any,
        ::TYPES::Proposal::_tao_any_destructor,
        ::TYPES::_tc_Proposal,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::Proposal *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::Proposal *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::Proposal *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::Proposal>::extract (
          _tao_any,
          ::TYPES::Proposal::_tao_any_destructor,
          ::TYPES::_tc_Proposal,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TYPES::Proposal &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::Proposal *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::Proposal>::insert_copy (
      _tao_any,
      TYPES::Proposal::_tao_any_destructor,
      TYPES::_tc_Proposal,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TYPES::Proposal *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::Proposal>::insert (
    _tao_any,
    TYPES::Proposal::_tao_any_destructor,
    TYPES::_tc_Proposal,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TYPES::Proposal *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::Proposal *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TYPES::Proposal *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::Proposal>::extract (
      _tao_any,
      TYPES::Proposal::_tao_any_destructor,
      TYPES::_tc_Proposal,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::ProposalList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::ProposalList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::ProposalList>::insert_copy (
          _tao_any,
          ::TYPES::ProposalList::_tao_any_destructor,
          ::TYPES::_tc_ProposalList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TYPES::ProposalList *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::ProposalList>::insert (
        _tao_any,
        ::TYPES::ProposalList::_tao_any_destructor,
        ::TYPES::_tc_ProposalList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::ProposalList *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::ProposalList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::ProposalList *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::ProposalList>::extract (
          _tao_any,
          ::TYPES::ProposalList::_tao_any_destructor,
          ::TYPES::_tc_ProposalList,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TYPES::ProposalList &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::ProposalList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::ProposalList>::insert_copy (
        _tao_any,
        TYPES::ProposalList::_tao_any_destructor,
        TYPES::_tc_ProposalList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TYPES::ProposalList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::ProposalList>::insert (
      _tao_any,
      TYPES::ProposalList::_tao_any_destructor,
      TYPES::_tc_ProposalList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TYPES::ProposalList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::ProposalList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TYPES::ProposalList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::ProposalList>::extract (
        _tao_any,
        TYPES::ProposalList::_tao_any_destructor,
        TYPES::_tc_ProposalList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TYPES
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TYPES::RGB &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TYPES::RGB *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TYPES::RGB>::insert_copy (
          _tao_any,
          ::TYPES::RGB::_tao_any_destructor,
          ::TYPES::_tc_RGB,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TYPES::RGB *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TYPES::RGB>::insert (
        _tao_any,
        ::TYPES::RGB::_tao_any_destructor,
        ::TYPES::_tc_RGB,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TYPES::RGB *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TYPES::RGB *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TYPES::RGB *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TYPES::RGB>::extract (
          _tao_any,
          ::TYPES::RGB::_tao_any_destructor,
          ::TYPES::_tc_RGB,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TYPES::RGB &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TYPES::RGB *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TYPES::RGB>::insert_copy (
      _tao_any,
      TYPES::RGB::_tao_any_destructor,
      TYPES::_tc_RGB,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TYPES::RGB *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TYPES::RGB>::insert (
    _tao_any,
    TYPES::RGB::_tao_any_destructor,
    TYPES::_tc_RGB,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TYPES::RGB *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TYPES::RGB *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TYPES::RGB *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TYPES::RGB>::extract (
      _tao_any,
      TYPES::RGB::_tao_any_destructor,
      TYPES::_tc_RGB,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TYPES_ImageType_CPP_
#define _TAO_CDR_OP_TYPES_ImageType_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::ImageType &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::ImageType &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TYPES_ImageType_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TYPES_ImageList_CPP_
#define _TAO_CDR_OP_TYPES_ImageList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::ImageList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::ImageList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TYPES_ImageList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::Position &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.az) &&
    (strm << _tao_aggregate.el);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::Position &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.az) &&
    (strm >> _tao_aggregate.el);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::Target &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.tid) &&
    (strm << _tao_aggregate.coordinates) &&
    (strm << _tao_aggregate.expTime);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::Target &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.tid) &&
    (strm >> _tao_aggregate.coordinates) &&
    (strm >> _tao_aggregate.expTime);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TYPES_TargetList_CPP_
#define _TAO_CDR_OP_TYPES_TargetList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::TargetList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::TargetList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TYPES_TargetList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::Proposal &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.pid) &&
    (strm << _tao_aggregate.targets) &&
    (strm << _tao_aggregate.status);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::Proposal &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.pid) &&
    (strm >> _tao_aggregate.targets) &&
    (strm >> _tao_aggregate.status);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TYPES_ProposalList_CPP_
#define _TAO_CDR_OP_TYPES_ProposalList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::ProposalList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::ProposalList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TYPES_ProposalList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TYPES::RGB &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.red) &&
    (strm << _tao_aggregate.green) &&
    (strm << _tao_aggregate.blue);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TYPES::RGB &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.red) &&
    (strm >> _tao_aggregate.green) &&
    (strm >> _tao_aggregate.blue);
}

TAO_END_VERSIONED_NAMESPACE_DECL



