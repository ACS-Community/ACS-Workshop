# Python stubs generated by omniidl from /home/almaproc/ostm/ICD/src/../idl/TelescopeControl.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "TELESCOPE_MODULE"
#
__name__ = "TELESCOPE_MODULE"
_0_TELESCOPE_MODULE = omniORB.openModule("TELESCOPE_MODULE", r"/home/almaproc/ostm/ICD/src/../idl/TelescopeControl.idl")
_0_TELESCOPE_MODULE__POA = omniORB.openModule("TELESCOPE_MODULE__POA", r"/home/almaproc/ostm/ICD/src/../idl/TelescopeControl.idl")


# interface TelescopeControl
_0_TELESCOPE_MODULE._d_TelescopeControl = (omniORB.tcInternal.tv_objref, "IDL:acsws/TELESCOPE_MODULE/TelescopeControl:1.0", "TelescopeControl")
omniORB.typeMapping["IDL:acsws/TELESCOPE_MODULE/TelescopeControl:1.0"] = _0_TELESCOPE_MODULE._d_TelescopeControl
_0_TELESCOPE_MODULE.TelescopeControl = omniORB.newEmptyClass()
class TelescopeControl (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_TELESCOPE_MODULE._d_TelescopeControl[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_TELESCOPE_MODULE.TelescopeControl = TelescopeControl
_0_TELESCOPE_MODULE._tc_TelescopeControl = omniORB.tcInternal.createTypeCode(_0_TELESCOPE_MODULE._d_TelescopeControl)
omniORB.registerType(TelescopeControl._NP_RepositoryId, _0_TELESCOPE_MODULE._d_TelescopeControl, _0_TELESCOPE_MODULE._tc_TelescopeControl)

# TelescopeControl operations and attributes
TelescopeControl._d_setTo = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (), None)
TelescopeControl._d_offSet = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (), None)
TelescopeControl._d_zenith = ((), (), None)
TelescopeControl._d_park = ((), (), None)
TelescopeControl._d_setUncalibrated = ((), (), None)
TelescopeControl._d_calibrateEncoders = ((), (), None)
TelescopeControl._d__get_commandedAltitude = ((),(omniORB.typeMapping["IDL:alma/ACS/RWdouble:1.0"],),None)
TelescopeControl._d__get_commandedAzimuth = ((),(omniORB.typeMapping["IDL:alma/ACS/RWdouble:1.0"],),None)
TelescopeControl._d__get_actualAltitude = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
TelescopeControl._d__get_actualAzimuth = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
TelescopeControl._d__get_status = ((),(omniORB.typeMapping["IDL:alma/ACS/RWpattern:1.0"],),None)

# TelescopeControl object reference
class _objref_TelescopeControl (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = TelescopeControl._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_CharacteristicComponent.__init__(self, obj)

    def setTo(self, *args):
        return self._obj.invoke("setTo", _0_TELESCOPE_MODULE.TelescopeControl._d_setTo, args)

    def offSet(self, *args):
        return self._obj.invoke("offSet", _0_TELESCOPE_MODULE.TelescopeControl._d_offSet, args)

    def zenith(self, *args):
        return self._obj.invoke("zenith", _0_TELESCOPE_MODULE.TelescopeControl._d_zenith, args)

    def park(self, *args):
        return self._obj.invoke("park", _0_TELESCOPE_MODULE.TelescopeControl._d_park, args)

    def setUncalibrated(self, *args):
        return self._obj.invoke("setUncalibrated", _0_TELESCOPE_MODULE.TelescopeControl._d_setUncalibrated, args)

    def calibrateEncoders(self, *args):
        return self._obj.invoke("calibrateEncoders", _0_TELESCOPE_MODULE.TelescopeControl._d_calibrateEncoders, args)

    def _get_commandedAltitude(self, *args):
        return self._obj.invoke("_get_commandedAltitude", _0_TELESCOPE_MODULE.TelescopeControl._d__get_commandedAltitude, args)

    commandedAltitude = property(_get_commandedAltitude)


    def _get_commandedAzimuth(self, *args):
        return self._obj.invoke("_get_commandedAzimuth", _0_TELESCOPE_MODULE.TelescopeControl._d__get_commandedAzimuth, args)

    commandedAzimuth = property(_get_commandedAzimuth)


    def _get_actualAltitude(self, *args):
        return self._obj.invoke("_get_actualAltitude", _0_TELESCOPE_MODULE.TelescopeControl._d__get_actualAltitude, args)

    actualAltitude = property(_get_actualAltitude)


    def _get_actualAzimuth(self, *args):
        return self._obj.invoke("_get_actualAzimuth", _0_TELESCOPE_MODULE.TelescopeControl._d__get_actualAzimuth, args)

    actualAzimuth = property(_get_actualAzimuth)


    def _get_status(self, *args):
        return self._obj.invoke("_get_status", _0_TELESCOPE_MODULE.TelescopeControl._d__get_status, args)

    status = property(_get_status)


omniORB.registerObjref(TelescopeControl._NP_RepositoryId, _objref_TelescopeControl)
_0_TELESCOPE_MODULE._objref_TelescopeControl = _objref_TelescopeControl
del TelescopeControl, _objref_TelescopeControl

# TelescopeControl skeleton
__name__ = "TELESCOPE_MODULE__POA"
class TelescopeControl (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_TELESCOPE_MODULE.TelescopeControl._NP_RepositoryId


    _omni_op_d = {"setTo": _0_TELESCOPE_MODULE.TelescopeControl._d_setTo, "offSet": _0_TELESCOPE_MODULE.TelescopeControl._d_offSet, "zenith": _0_TELESCOPE_MODULE.TelescopeControl._d_zenith, "park": _0_TELESCOPE_MODULE.TelescopeControl._d_park, "setUncalibrated": _0_TELESCOPE_MODULE.TelescopeControl._d_setUncalibrated, "calibrateEncoders": _0_TELESCOPE_MODULE.TelescopeControl._d_calibrateEncoders, "_get_commandedAltitude": _0_TELESCOPE_MODULE.TelescopeControl._d__get_commandedAltitude, "_get_commandedAzimuth": _0_TELESCOPE_MODULE.TelescopeControl._d__get_commandedAzimuth, "_get_actualAltitude": _0_TELESCOPE_MODULE.TelescopeControl._d__get_actualAltitude, "_get_actualAzimuth": _0_TELESCOPE_MODULE.TelescopeControl._d__get_actualAzimuth, "_get_status": _0_TELESCOPE_MODULE.TelescopeControl._d__get_status}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

TelescopeControl._omni_skeleton = TelescopeControl
_0_TELESCOPE_MODULE__POA.TelescopeControl = TelescopeControl
omniORB.registerSkeleton(TelescopeControl._NP_RepositoryId, TelescopeControl)
del TelescopeControl
__name__ = "TELESCOPE_MODULE"

#
# End of module "TELESCOPE_MODULE"
#
__name__ = "TelescopeControl_idl"

_exported_modules = ( "TELESCOPE_MODULE", )

# The end.
