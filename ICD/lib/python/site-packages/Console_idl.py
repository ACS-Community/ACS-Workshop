# Python stubs generated by omniidl from /home/almaproc/ostm/ICD/src/../idl/Console.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "Types.idl"
import Types_idl
_0_TYPES = omniORB.openModule("TYPES")
_0_TYPES__POA = omniORB.openModule("TYPES__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "SYSTEMErr.idl"
import SYSTEMErr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_SYSTEMErr = omniORB.openModule("SYSTEMErr")
_0_SYSTEMErr__POA = omniORB.openModule("SYSTEMErr__POA")

#
# Start of module "CONSOLE_MODULE"
#
__name__ = "CONSOLE_MODULE"
_0_CONSOLE_MODULE = omniORB.openModule("CONSOLE_MODULE", r"/home/almaproc/ostm/ICD/src/../idl/Console.idl")
_0_CONSOLE_MODULE__POA = omniORB.openModule("CONSOLE_MODULE__POA", r"/home/almaproc/ostm/ICD/src/../idl/Console.idl")


# interface Console
_0_CONSOLE_MODULE._d_Console = (omniORB.tcInternal.tv_objref, "IDL:acsws/CONSOLE_MODULE/Console:1.0", "Console")
omniORB.typeMapping["IDL:acsws/CONSOLE_MODULE/Console:1.0"] = _0_CONSOLE_MODULE._d_Console
_0_CONSOLE_MODULE.Console = omniORB.newEmptyClass()
class Console (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_CONSOLE_MODULE._d_Console[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CONSOLE_MODULE.Console = Console
_0_CONSOLE_MODULE._tc_Console = omniORB.tcInternal.createTypeCode(_0_CONSOLE_MODULE._d_Console)
omniORB.registerType(Console._NP_RepositoryId, _0_CONSOLE_MODULE._d_Console, _0_CONSOLE_MODULE._tc_Console)

# Console operations and attributes
Console._d_setMode = ((omniORB.tcInternal.tv_boolean, ), (), {_0_SYSTEMErr.AlreadyInAutomaticEx._NP_RepositoryId: _0_SYSTEMErr._d_AlreadyInAutomaticEx})
Console._d_getMode = ((), (omniORB.tcInternal.tv_boolean, ), None)
Console._d_cameraOn = ((), (), {_0_SYSTEMErr.SystemInAutoModeEx._NP_RepositoryId: _0_SYSTEMErr._d_SystemInAutoModeEx})
Console._d_cameraOff = ((), (), {_0_SYSTEMErr.SystemInAutoModeEx._NP_RepositoryId: _0_SYSTEMErr._d_SystemInAutoModeEx})
Console._d_moveTelescope = ((omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], ), (), {_0_SYSTEMErr.PositionOutOfLimitsEx._NP_RepositoryId: _0_SYSTEMErr._d_PositionOutOfLimitsEx, _0_SYSTEMErr.SystemInAutoModeEx._NP_RepositoryId: _0_SYSTEMErr._d_SystemInAutoModeEx})
Console._d_getTelescopePosition = ((), (omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], ), None)
Console._d_getCameraImage = ((), (omniORB.typeMapping["IDL:acsws/TYPES/ImageType:1.0"], ), {_0_SYSTEMErr.SystemInAutoModeEx._NP_RepositoryId: _0_SYSTEMErr._d_SystemInAutoModeEx, _0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Console._d_setRGB = ((omniORB.typeMapping["IDL:acsws/TYPES/RGB:1.0"], ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Console._d_setPixelBias = ((omniORB.tcInternal.tv_long, ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Console._d_setResetLevel = ((omniORB.tcInternal.tv_long, ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})

# Console object reference
class _objref_Console (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = Console._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def setMode(self, *args):
        return self._obj.invoke("setMode", _0_CONSOLE_MODULE.Console._d_setMode, args)

    def getMode(self, *args):
        return self._obj.invoke("getMode", _0_CONSOLE_MODULE.Console._d_getMode, args)

    def cameraOn(self, *args):
        return self._obj.invoke("cameraOn", _0_CONSOLE_MODULE.Console._d_cameraOn, args)

    def cameraOff(self, *args):
        return self._obj.invoke("cameraOff", _0_CONSOLE_MODULE.Console._d_cameraOff, args)

    def moveTelescope(self, *args):
        return self._obj.invoke("moveTelescope", _0_CONSOLE_MODULE.Console._d_moveTelescope, args)

    def getTelescopePosition(self, *args):
        return self._obj.invoke("getTelescopePosition", _0_CONSOLE_MODULE.Console._d_getTelescopePosition, args)

    def getCameraImage(self, *args):
        return self._obj.invoke("getCameraImage", _0_CONSOLE_MODULE.Console._d_getCameraImage, args)

    def setRGB(self, *args):
        return self._obj.invoke("setRGB", _0_CONSOLE_MODULE.Console._d_setRGB, args)

    def setPixelBias(self, *args):
        return self._obj.invoke("setPixelBias", _0_CONSOLE_MODULE.Console._d_setPixelBias, args)

    def setResetLevel(self, *args):
        return self._obj.invoke("setResetLevel", _0_CONSOLE_MODULE.Console._d_setResetLevel, args)

omniORB.registerObjref(Console._NP_RepositoryId, _objref_Console)
_0_CONSOLE_MODULE._objref_Console = _objref_Console
del Console, _objref_Console

# Console skeleton
__name__ = "CONSOLE_MODULE__POA"
class Console (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_CONSOLE_MODULE.Console._NP_RepositoryId


    _omni_op_d = {"setMode": _0_CONSOLE_MODULE.Console._d_setMode, "getMode": _0_CONSOLE_MODULE.Console._d_getMode, "cameraOn": _0_CONSOLE_MODULE.Console._d_cameraOn, "cameraOff": _0_CONSOLE_MODULE.Console._d_cameraOff, "moveTelescope": _0_CONSOLE_MODULE.Console._d_moveTelescope, "getTelescopePosition": _0_CONSOLE_MODULE.Console._d_getTelescopePosition, "getCameraImage": _0_CONSOLE_MODULE.Console._d_getCameraImage, "setRGB": _0_CONSOLE_MODULE.Console._d_setRGB, "setPixelBias": _0_CONSOLE_MODULE.Console._d_setPixelBias, "setResetLevel": _0_CONSOLE_MODULE.Console._d_setResetLevel}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

Console._omni_skeleton = Console
_0_CONSOLE_MODULE__POA.Console = Console
omniORB.registerSkeleton(Console._NP_RepositoryId, Console)
del Console
__name__ = "CONSOLE_MODULE"

#
# End of module "CONSOLE_MODULE"
#
__name__ = "Console_idl"

_exported_modules = ( "CONSOLE_MODULE", )

# The end.
