# Python stubs generated by omniidl from /home/almaproc/ostm/ICD/src/../idl/Telescope.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "Types.idl"
import Types_idl
_0_TYPES = omniORB.openModule("TYPES")
_0_TYPES__POA = omniORB.openModule("TYPES__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "SYSTEMErr.idl"
import SYSTEMErr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_SYSTEMErr = omniORB.openModule("SYSTEMErr")
_0_SYSTEMErr__POA = omniORB.openModule("SYSTEMErr__POA")

#
# Start of module "TELESCOPE_MODULE"
#
__name__ = "TELESCOPE_MODULE"
_0_TELESCOPE_MODULE = omniORB.openModule("TELESCOPE_MODULE", r"/home/almaproc/ostm/ICD/src/../idl/Telescope.idl")
_0_TELESCOPE_MODULE__POA = omniORB.openModule("TELESCOPE_MODULE__POA", r"/home/almaproc/ostm/ICD/src/../idl/Telescope.idl")


# interface Telescope
_0_TELESCOPE_MODULE._d_Telescope = (omniORB.tcInternal.tv_objref, "IDL:acsws/TELESCOPE_MODULE/Telescope:1.0", "Telescope")
omniORB.typeMapping["IDL:acsws/TELESCOPE_MODULE/Telescope:1.0"] = _0_TELESCOPE_MODULE._d_Telescope
_0_TELESCOPE_MODULE.Telescope = omniORB.newEmptyClass()
class Telescope (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_TELESCOPE_MODULE._d_Telescope[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_TELESCOPE_MODULE.Telescope = Telescope
_0_TELESCOPE_MODULE._tc_Telescope = omniORB.tcInternal.createTypeCode(_0_TELESCOPE_MODULE._d_Telescope)
omniORB.registerType(Telescope._NP_RepositoryId, _0_TELESCOPE_MODULE._d_Telescope, _0_TELESCOPE_MODULE._tc_Telescope)

# Telescope operations and attributes
Telescope._d_observe = ((omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:acsws/TYPES/ImageType:1.0"], ), {_0_SYSTEMErr.PositionOutOfLimitsEx._NP_RepositoryId: _0_SYSTEMErr._d_PositionOutOfLimitsEx})
Telescope._d_moveTo = ((omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], ), (), {_0_SYSTEMErr.PositionOutOfLimitsEx._NP_RepositoryId: _0_SYSTEMErr._d_PositionOutOfLimitsEx})
Telescope._d_getCurrentPosition = ((), (omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], ), None)

# Telescope object reference
class _objref_Telescope (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = Telescope._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def observe(self, *args):
        return self._obj.invoke("observe", _0_TELESCOPE_MODULE.Telescope._d_observe, args)

    def moveTo(self, *args):
        return self._obj.invoke("moveTo", _0_TELESCOPE_MODULE.Telescope._d_moveTo, args)

    def getCurrentPosition(self, *args):
        return self._obj.invoke("getCurrentPosition", _0_TELESCOPE_MODULE.Telescope._d_getCurrentPosition, args)

omniORB.registerObjref(Telescope._NP_RepositoryId, _objref_Telescope)
_0_TELESCOPE_MODULE._objref_Telescope = _objref_Telescope
del Telescope, _objref_Telescope

# Telescope skeleton
__name__ = "TELESCOPE_MODULE__POA"
class Telescope (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_TELESCOPE_MODULE.Telescope._NP_RepositoryId


    _omni_op_d = {"observe": _0_TELESCOPE_MODULE.Telescope._d_observe, "moveTo": _0_TELESCOPE_MODULE.Telescope._d_moveTo, "getCurrentPosition": _0_TELESCOPE_MODULE.Telescope._d_getCurrentPosition}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

Telescope._omni_skeleton = Telescope
_0_TELESCOPE_MODULE__POA.Telescope = Telescope
omniORB.registerSkeleton(Telescope._NP_RepositoryId, Telescope)
del Telescope
__name__ = "TELESCOPE_MODULE"

#
# End of module "TELESCOPE_MODULE"
#
__name__ = "Telescope_idl"

_exported_modules = ( "TELESCOPE_MODULE", )

# The end.
