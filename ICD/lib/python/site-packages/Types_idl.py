# Python stubs generated by omniidl from /home/almaproc/ostm/ICD/src/../idl/Types.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "TYPES"
#
__name__ = "TYPES"
_0_TYPES = omniORB.openModule("TYPES", r"/home/almaproc/ostm/ICD/src/../idl/Types.idl")
_0_TYPES__POA = omniORB.openModule("TYPES__POA", r"/home/almaproc/ostm/ICD/src/../idl/Types.idl")


# typedef ... ImageType
class ImageType:
    _NP_RepositoryId = "IDL:acsws/TYPES/ImageType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_TYPES.ImageType = ImageType
_0_TYPES._d_ImageType  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_TYPES._ad_ImageType = (omniORB.tcInternal.tv_alias, ImageType._NP_RepositoryId, "ImageType", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_TYPES._tc_ImageType = omniORB.tcInternal.createTypeCode(_0_TYPES._ad_ImageType)
omniORB.registerType(ImageType._NP_RepositoryId, _0_TYPES._ad_ImageType, _0_TYPES._tc_ImageType)
del ImageType

# typedef ... ImageList
class ImageList:
    _NP_RepositoryId = "IDL:acsws/TYPES/ImageList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_TYPES.ImageList = ImageList
_0_TYPES._d_ImageList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/ImageType:1.0"], 0)
_0_TYPES._ad_ImageList = (omniORB.tcInternal.tv_alias, ImageList._NP_RepositoryId, "ImageList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/ImageType:1.0"], 0))
_0_TYPES._tc_ImageList = omniORB.tcInternal.createTypeCode(_0_TYPES._ad_ImageList)
omniORB.registerType(ImageList._NP_RepositoryId, _0_TYPES._ad_ImageList, _0_TYPES._tc_ImageList)
del ImageList

# struct Position
_0_TYPES.Position = omniORB.newEmptyClass()
class Position (omniORB.StructBase):
    _NP_RepositoryId = "IDL:acsws/TYPES/Position:1.0"

    def __init__(self, az, el):
        self.az = az
        self.el = el

_0_TYPES.Position = Position
_0_TYPES._d_Position  = (omniORB.tcInternal.tv_struct, Position, Position._NP_RepositoryId, "Position", "az", omniORB.tcInternal.tv_double, "el", omniORB.tcInternal.tv_double)
_0_TYPES._tc_Position = omniORB.tcInternal.createTypeCode(_0_TYPES._d_Position)
omniORB.registerType(Position._NP_RepositoryId, _0_TYPES._d_Position, _0_TYPES._tc_Position)
del Position

# struct Target
_0_TYPES.Target = omniORB.newEmptyClass()
class Target (omniORB.StructBase):
    _NP_RepositoryId = "IDL:acsws/TYPES/Target:1.0"

    def __init__(self, tid, coordinates, expTime):
        self.tid = tid
        self.coordinates = coordinates
        self.expTime = expTime

_0_TYPES.Target = Target
_0_TYPES._d_Target  = (omniORB.tcInternal.tv_struct, Target, Target._NP_RepositoryId, "Target", "tid", omniORB.tcInternal.tv_long, "coordinates", omniORB.typeMapping["IDL:acsws/TYPES/Position:1.0"], "expTime", omniORB.tcInternal.tv_long)
_0_TYPES._tc_Target = omniORB.tcInternal.createTypeCode(_0_TYPES._d_Target)
omniORB.registerType(Target._NP_RepositoryId, _0_TYPES._d_Target, _0_TYPES._tc_Target)
del Target

# typedef ... TargetList
class TargetList:
    _NP_RepositoryId = "IDL:acsws/TYPES/TargetList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_TYPES.TargetList = TargetList
_0_TYPES._d_TargetList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/Target:1.0"], 0)
_0_TYPES._ad_TargetList = (omniORB.tcInternal.tv_alias, TargetList._NP_RepositoryId, "TargetList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/Target:1.0"], 0))
_0_TYPES._tc_TargetList = omniORB.tcInternal.createTypeCode(_0_TYPES._ad_TargetList)
omniORB.registerType(TargetList._NP_RepositoryId, _0_TYPES._ad_TargetList, _0_TYPES._tc_TargetList)
del TargetList

# struct Proposal
_0_TYPES.Proposal = omniORB.newEmptyClass()
class Proposal (omniORB.StructBase):
    _NP_RepositoryId = "IDL:acsws/TYPES/Proposal:1.0"

    def __init__(self, pid, targets, status):
        self.pid = pid
        self.targets = targets
        self.status = status

_0_TYPES.Proposal = Proposal
_0_TYPES._d_Proposal  = (omniORB.tcInternal.tv_struct, Proposal, Proposal._NP_RepositoryId, "Proposal", "pid", omniORB.tcInternal.tv_long, "targets", omniORB.typeMapping["IDL:acsws/TYPES/TargetList:1.0"], "status", omniORB.tcInternal.tv_long)
_0_TYPES._tc_Proposal = omniORB.tcInternal.createTypeCode(_0_TYPES._d_Proposal)
omniORB.registerType(Proposal._NP_RepositoryId, _0_TYPES._d_Proposal, _0_TYPES._tc_Proposal)
del Proposal

# typedef ... ProposalList
class ProposalList:
    _NP_RepositoryId = "IDL:acsws/TYPES/ProposalList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_TYPES.ProposalList = ProposalList
_0_TYPES._d_ProposalList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/Proposal:1.0"], 0)
_0_TYPES._ad_ProposalList = (omniORB.tcInternal.tv_alias, ProposalList._NP_RepositoryId, "ProposalList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:acsws/TYPES/Proposal:1.0"], 0))
_0_TYPES._tc_ProposalList = omniORB.tcInternal.createTypeCode(_0_TYPES._ad_ProposalList)
omniORB.registerType(ProposalList._NP_RepositoryId, _0_TYPES._ad_ProposalList, _0_TYPES._tc_ProposalList)
del ProposalList

# struct RGB
_0_TYPES.RGB = omniORB.newEmptyClass()
class RGB (omniORB.StructBase):
    _NP_RepositoryId = "IDL:acsws/TYPES/RGB:1.0"

    def __init__(self, red, green, blue):
        self.red = red
        self.green = green
        self.blue = blue

_0_TYPES.RGB = RGB
_0_TYPES._d_RGB  = (omniORB.tcInternal.tv_struct, RGB, RGB._NP_RepositoryId, "RGB", "red", omniORB.tcInternal.tv_long, "green", omniORB.tcInternal.tv_long, "blue", omniORB.tcInternal.tv_long)
_0_TYPES._tc_RGB = omniORB.tcInternal.createTypeCode(_0_TYPES._d_RGB)
omniORB.registerType(RGB._NP_RepositoryId, _0_TYPES._d_RGB, _0_TYPES._tc_RGB)
del RGB

#
# End of module "TYPES"
#
__name__ = "Types_idl"

_exported_modules = ( "TYPES", )

# The end.
