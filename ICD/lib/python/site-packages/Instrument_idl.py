# Python stubs generated by omniidl from /home/almaproc/ostm/ICD/src/../idl/Instrument.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "Types.idl"
import Types_idl
_0_TYPES = omniORB.openModule("TYPES")
_0_TYPES__POA = omniORB.openModule("TYPES__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "SYSTEMErr.idl"
import SYSTEMErr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_SYSTEMErr = omniORB.openModule("SYSTEMErr")
_0_SYSTEMErr__POA = omniORB.openModule("SYSTEMErr__POA")

#
# Start of module "INSTRUMENT_MODULE"
#
__name__ = "INSTRUMENT_MODULE"
_0_INSTRUMENT_MODULE = omniORB.openModule("INSTRUMENT_MODULE", r"/home/almaproc/ostm/ICD/src/../idl/Instrument.idl")
_0_INSTRUMENT_MODULE__POA = omniORB.openModule("INSTRUMENT_MODULE__POA", r"/home/almaproc/ostm/ICD/src/../idl/Instrument.idl")


# interface Instrument
_0_INSTRUMENT_MODULE._d_Instrument = (omniORB.tcInternal.tv_objref, "IDL:acsws/INSTRUMENT_MODULE/Instrument:1.0", "Instrument")
omniORB.typeMapping["IDL:acsws/INSTRUMENT_MODULE/Instrument:1.0"] = _0_INSTRUMENT_MODULE._d_Instrument
_0_INSTRUMENT_MODULE.Instrument = omniORB.newEmptyClass()
class Instrument (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_INSTRUMENT_MODULE._d_Instrument[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_INSTRUMENT_MODULE.Instrument = Instrument
_0_INSTRUMENT_MODULE._tc_Instrument = omniORB.tcInternal.createTypeCode(_0_INSTRUMENT_MODULE._d_Instrument)
omniORB.registerType(Instrument._NP_RepositoryId, _0_INSTRUMENT_MODULE._d_Instrument, _0_INSTRUMENT_MODULE._tc_Instrument)

# Instrument operations and attributes
Instrument._d_cameraOn = ((), (), None)
Instrument._d_cameraOff = ((), (), None)
Instrument._d_takeImage = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:acsws/TYPES/ImageType:1.0"], ), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Instrument._d_setRGB = ((omniORB.typeMapping["IDL:acsws/TYPES/RGB:1.0"], ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Instrument._d_setPixelBias = ((omniORB.tcInternal.tv_long, ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})
Instrument._d_setResetLevel = ((omniORB.tcInternal.tv_long, ), (), {_0_SYSTEMErr.CameraIsOffEx._NP_RepositoryId: _0_SYSTEMErr._d_CameraIsOffEx})

# Instrument object reference
class _objref_Instrument (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = Instrument._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def cameraOn(self, *args):
        return self._obj.invoke("cameraOn", _0_INSTRUMENT_MODULE.Instrument._d_cameraOn, args)

    def cameraOff(self, *args):
        return self._obj.invoke("cameraOff", _0_INSTRUMENT_MODULE.Instrument._d_cameraOff, args)

    def takeImage(self, *args):
        return self._obj.invoke("takeImage", _0_INSTRUMENT_MODULE.Instrument._d_takeImage, args)

    def setRGB(self, *args):
        return self._obj.invoke("setRGB", _0_INSTRUMENT_MODULE.Instrument._d_setRGB, args)

    def setPixelBias(self, *args):
        return self._obj.invoke("setPixelBias", _0_INSTRUMENT_MODULE.Instrument._d_setPixelBias, args)

    def setResetLevel(self, *args):
        return self._obj.invoke("setResetLevel", _0_INSTRUMENT_MODULE.Instrument._d_setResetLevel, args)

omniORB.registerObjref(Instrument._NP_RepositoryId, _objref_Instrument)
_0_INSTRUMENT_MODULE._objref_Instrument = _objref_Instrument
del Instrument, _objref_Instrument

# Instrument skeleton
__name__ = "INSTRUMENT_MODULE__POA"
class Instrument (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_INSTRUMENT_MODULE.Instrument._NP_RepositoryId


    _omni_op_d = {"cameraOn": _0_INSTRUMENT_MODULE.Instrument._d_cameraOn, "cameraOff": _0_INSTRUMENT_MODULE.Instrument._d_cameraOff, "takeImage": _0_INSTRUMENT_MODULE.Instrument._d_takeImage, "setRGB": _0_INSTRUMENT_MODULE.Instrument._d_setRGB, "setPixelBias": _0_INSTRUMENT_MODULE.Instrument._d_setPixelBias, "setResetLevel": _0_INSTRUMENT_MODULE.Instrument._d_setResetLevel}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

Instrument._omni_skeleton = Instrument
_0_INSTRUMENT_MODULE__POA.Instrument = Instrument
omniORB.registerSkeleton(Instrument._NP_RepositoryId, Instrument)
del Instrument
__name__ = "INSTRUMENT_MODULE"

#
# End of module "INSTRUMENT_MODULE"
#
__name__ = "Instrument_idl"

_exported_modules = ( "INSTRUMENT_MODULE", )

# The end.
