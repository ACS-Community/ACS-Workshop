#ifndef _TELESCOPE_IDL_
#define _TELESCOPE_IDL_

/*******************************************************************************
*    ACS Community - https://github.com/ACS-Community/ACS-Workshop
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#include <acscomponent.idl>
#include <Types.idl>
#include "SYSTEMErr.idl"

#pragma prefix "acsws"


/** 
 * @file Telescope.idl
 * SYSTEMErr Telescope IDL file
 */
module TELESCOPE_MODULE
{
	/** @interface Telescope
	 * High level interface to communicate with the hardware
	 * related component.
	 */
	
	interface Telescope : ACS::ACSComponent
	{
	/** 
	 * Moves to the given position and takes an exposure
	 * of length exposureTime (seconds). Raises and exception 
	 * if the requested position is out of limits.
	 *
	 * @param coordinates target coordinates
	 * @param exposureTime exposure time of the current observation
	 * @return Image 
	 * 
	 */
	TYPES::ImageType observe(in TYPES::Position coordinates, in long exposureTime)
		raises(SYSTEMErr::PositionOutOfLimitsEx);

	/** 
	 * Commands the telescope to move to the given position. Raises
	 * an exception if the requested position is out of limits.
	 *
	 * @param coordinates Requested telescope position
	 * @return None
	 */
	void moveTo(in TYPES::Position coordinates)
		raises(SYSTEMErr::PositionOutOfLimitsEx);

	/**
	 * Get the current telescope position.
	 *
	 * @return current telescope position
	 */
	TYPES::Position getCurrentPosition();
	};
};

#endif
