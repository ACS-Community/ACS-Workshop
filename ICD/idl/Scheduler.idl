#ifndef _SCHEDULER_IDL_
#define _SCHEDULER_IDL_

/*******************************************************************************
*    ASTRI - Astrofisica con Specchi a Teccnologia Italiana
*    (c) INAF - Instituto Nazionale di Astrofisica, 2012
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#include <acscomponent.idl>
#include "SORTErr.idl"

#pragma prefix "astri"


/** 
 * @file Scheduler.idl
 * SORTErr Scheduler IDL file
 */

module SCHEDULER_MODULE
{
    /** @interface Scheduler
     *  This is a simple scheduler for the SORTErr
     */
    interface Scheduler : ACS::ACSComponent
	{
	/**
	 * Start the scheduler.
         * The scheduler will loop through all available proposals,
         * either until all proposals are done or until the stop method is called.
	 * Raises an exception if called twice.
	 * @return None
	 */
	void start ()
		raises(SORTErr::SchedulerAlreadyRunningEx);

	/**
	 * Stops the scheduler.
	 * This will stop the scheduler from scheduling more proposals. 
	 * 
	 * It will not(!) break the ongoing observation, and will return only
	 * when the running observation has finished.
	 *
	 * Raises an exception if called twice.
	 * @return None
	 */
	void stop ()
		raises(SORTErr::SchedulerAlreadyStoppedEx);

	/**
	 * Returns the pid of the proposal currently under execution
	 *
	 * Raises exception if no proposal is executing.
	 * @retun Proposal ID
	 */
	long proposalUnderExecution()
		raises(SORTErr::NoProposalExecutingEx);
	};    

};

#endif

