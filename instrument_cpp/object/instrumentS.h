// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:511

#ifndef _TAO_IDL__TMP__INSTRUMENTS_H_
#define _TAO_IDL__TMP__INSTRUMENTS_H_


#include "instrumentC.h"
#include "acscomponentS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:41

namespace POA_instrumentNS
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class instrument;
  typedef instrument *instrument_ptr;
  
  class  instrument
    : public virtual POA_ACS::ACSComponent
  {
  protected:
    instrument (void);
  
  public:
    // Useful for template programming.
    typedef ::instrumentNS::instrument _stub_type;
    typedef ::instrumentNS::instrument_ptr _stub_ptr_type;
    typedef ::instrumentNS::instrument_var _stub_var_type;
    
    instrument (const instrument& rhs);
    virtual ~instrument (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::instrumentNS::instrument *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual char * sayHello (void) = 0;
    
    static void sayHello_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:72

} // module instrumentNS
#if defined (__ACE_INLINE__)
#include "instrumentS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

