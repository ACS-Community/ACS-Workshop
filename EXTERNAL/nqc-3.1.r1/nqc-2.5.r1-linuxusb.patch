--- ./Makefile	2003-04-14 01:19:54.000000000 +0800
+++ ../nqc-2.5.r1.patch/Makefile	2003-07-24 21:46:23.000000000 +0800
@@ -66,16 +66,24 @@
 
 USBOBJ = rcxlib/RCX_USBTowerPipe_none.o
 
+
+
 #
 # Platform specific tweaks
 #
+ifneq (,$findstring $(OSTYPE), linux LINUX linux-gnu)
+  # Linux
+  USBOBJ = rcxlib/RCX_USBTowerPipe_linux.o
+  CFLAGS += -I/usr/local/include/LegoUSB -Wno-deprecated
+endif
+
 ifeq ($(TARGET),macosx)
   # Mac OSX
   LIBS += -framework IOKit -framework CoreFoundation
   USBOBJ = rcxlib/RCX_USBTowerPipe_osx.o
   CC = c++
 else
-ifeq ($TARGET),solaris)
+ifeq ($(TARGET),solaris)
   # Solaris
   CFLAGS += -DSOLARIS
 else
--- ./rcxlib/RCX_USBTowerPipe_linux.cpp	1970-01-01 08:00:00.000000000 +0800
+++ ../nqc-2.5.r1.patch/rcxlib/RCX_USBTowerPipe_linux.cpp	2003-07-26 18:43:34.000000000 +0800
@@ -0,0 +1,150 @@
+/*
+ * The contents of this file are subject to the Mozilla Public License
+ * Version 1.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS"
+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+ * License for the specific language governing rights and limitations
+ * under the License.
+ *
+ * Code adapted for use with Linux LegoUSB driver by Bret Thaeler 
+ * 	& the LegoUSB DevTeam <http://legousb.sourceforge.net>.
+ * 	LegoUSB Portions Copyright (c) 2001 - 2002 Bret Thaeler & The LegoUSB DevTeam
+ *
+ * The Initial Developer of this code is David Baum.
+ * Portions created by David Baum are Copyright (C) 1998 David Baum.
+ * All Rights Reserved.
+ */
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include "RCX_Pipe.h"
+
+#include <LegoUSB/legousbtower.h>
+
+
+class RCX_USBTowerPipe_linux : public RCX_Pipe
+{
+public:
+						RCX_USBTowerPipe_linux() : fd(-1) {}
+	virtual				~RCX_USBTowerPipe_linux() { Close(); }
+						
+	virtual RCX_Result	Open(const char *name, int mode);
+	virtual void		Close();
+
+	virtual int			GetCapabilities() const;
+	virtual RCX_Result	SetMode(int mode);
+
+	virtual long		Read(void *ptr, long count, long timeout_ms);
+	virtual long		Write(const void *ptr, long count);
+
+private:
+	void		SetTimeout(long ms);
+	int		fd;
+};
+
+
+RCX_Pipe* RCX_NewUSBTowerPipe()
+{
+	return new RCX_USBTowerPipe_linux();
+}
+
+#define DEFAULT_TOWER_NAME "/dev/usb/lego0"
+
+RCX_Result RCX_USBTowerPipe_linux::Open(const char *name, int mode)
+{
+	// if (name == 0 || *name==0)
+	{
+		name = DEFAULT_TOWER_NAME;
+	}
+
+	if (mode != kNormalIrMode && mode != kFastIrMode) return kRCX_PipeModeError;
+	
+	fd = open(name, O_RDWR);
+
+	if (fd < 0) return kRCX_OpenSerialError;
+
+	SetMode(mode);
+
+	return kRCX_OK;
+}
+
+
+void RCX_USBTowerPipe_linux::Close()
+{
+	if (fd < 0) return;
+
+	close(fd);
+	fd = -1;
+}
+
+
+long RCX_USBTowerPipe_linux::Write(const void *ptr, long count)
+{
+	ssize_t actual;
+	ssize_t i;
+
+	actual = 0;
+	while(count > 0) {
+		if ((i = write(fd, (void *) &((char *)ptr)[actual], (size_t)count)) < 0)
+			return -1;
+		count -= i;
+		actual += i;
+	}
+
+	return actual;
+}
+
+
+long RCX_USBTowerPipe_linux::Read(void *ptr, long count, long timeout)
+{
+	ssize_t actual;
+
+	SetTimeout(timeout);
+
+	if ((actual = read(fd, ptr, count)) < 0)
+	{
+		return 0;
+	}
+
+	return actual;
+}
+
+
+int RCX_USBTowerPipe_linux::GetCapabilities() const
+{
+	// only normal IR mode is supported, and
+	// the ABSORB_0x55_FLAG is needed to tell the
+	// transport that initial 0x55 bytes don't make
+	// it through the USB/driver shim
+	// return kNormalIrMode + kAbsorb55Flag;
+	return kNormalIrMode + kFastIrMode;
+}
+
+
+RCX_Result RCX_USBTowerPipe_linux::SetMode(int mode)
+{
+	switch(mode)
+	{
+		case kNormalIrMode:
+		case kFastIrMode:
+			return kRCX_OK;
+		default:
+			return kRCX_PipeModeError;
+	}
+}
+
+
+void RCX_USBTowerPipe_linux::SetTimeout(long timeout_ms)
+{
+	if (timeout_ms == 0) {
+		timeout_ms = 20;
+	}
+
+	ioctl(fd, LEGO_TOWER_SET_READ_TIMEOUT, timeout_ms);
+}
--- ./rcxlib/rcxnub_linuxusb.h	1970-01-01 08:00:00.000000000 +0800
+++ ../nqc-2.5.r1.patch/rcxlib/rcxnub_linuxusb.h	2003-07-24 23:01:20.000000000 +0800
@@ -0,0 +1,7 @@
+static const unsigned char rcxnub_linux_usb[]={
+121,6,0,15,107,134,238,128,121,6,238,100,109,246,121,6,
+238,116,94,0,59,154,11,135,121,6,238,94,94,0,6,136,
+46,216,206,48,62,216,254,103,62,217,24,238,106,142,239,81,
+254,2,106,142,239,6,254,13,106,142,238,94,84,112,68,111,
+32,121,111,117,32,98,121,116,101,44,32,119,104,101,110,32,
+73,32,107,110,111,99,107,63,0,0,};
