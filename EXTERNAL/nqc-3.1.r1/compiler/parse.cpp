
/*
 * A Bison parser, made from parse.y with Bison version GNU Bison version 1.24
 */

#define YYBISON 1  /* Identify Bison output.  */

#define	OR	258
#define	AND	259
#define	REL_EQ	260
#define	REL_NE	261
#define	REL_LE	262
#define	REL_GE	263
#define	LEFT	264
#define	RIGHT	265
#define	UMINUS	266
#define	INDIRECT	267
#define	INCDEC	268
#define	ABS	269
#define	SIGN	270
#define	TYPE	271
#define	EVENT_SRC	272
#define	LOWER_THAN_ELSE	273
#define	ELSE	274
#define	LOWER_THAN_EXPR_SHIFT	275
#define	ID	276
#define	NUMBER	277
#define	ASSIGN	278
#define	ASSIGN2	279
#define	TASKOP	280
#define	JUMP	281
#define	TASK	282
#define	SUB	283
#define	STRING	284
#define	PP_DEFINE	285
#define	PP_INCLUDE	286
#define	NL	287
#define	WS	288
#define	PP_ARG	289
#define	PP_UNKNOWN	290
#define	PP_IFDEF	291
#define	PP_IF	292
#define	PP_ELSE	293
#define	PP_ELIF	294
#define	PP_ENDIF	295
#define	PP_UNDEF	296
#define	PP_PRAGMA	297
#define	PP_GLOM	298
#define	PP_ERROR	299
#define	PP_WARNING	300
#define	IF	301
#define	WHILE	302
#define	DO	303
#define	FOR	304
#define	REPEAT	305
#define	SWITCH	306
#define	CASE	307
#define	DEFAULT	308
#define	MONITOR	309
#define	CATCH	310
#define	ACQUIRE	311
#define	GOTO	312
#define	ASM	313
#define	INT	314
#define	T_VOID	315
#define	T_CONST	316
#define	SENSOR	317
#define	TASKID	318
#define	NOLIST	319
#define	RES	320
#define	CTRUE	321
#define	CFALSE	322

#line 1 "parse.y"

/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Initial Developer of this code is David Baum.
 * Portions created by David Baum are Copyright (C) 1998 David Baum.
 * All Rights Reserved.
 */
#line 19 "parse.y"

// prevent redefinition of YYSTYPE in parser.h
#define __PARSE_TAB_H

// these classes must be defined prior to YYSTYPE
#include "Fragment.h"
#include "Resource.h"
#include "BlockStmt.h"
#include "Symbol.h"
#include "Expr.h"
#include "FunctionDef.h"
#include "CallStmt.h"
#include "AsmStmt.h"
#include "CaseStmt.h"
#include "DeclareStmt.h"
#include "Fragment.h"

#if __MWERKS__
#include <alloca.h>
#endif

class Clause;
class LocationNode;


#line 45 "parse.y"
typedef union {
        int			fInt;
        bool		fBool;
        Resource*	fResource;
        Fragment*	fFragment;
        Stmt*		fStmt;
        BlockStmt*	fBlock;
        Symbol*		fSymbol;
        char*		fString;
        Expr*		fExpr;
        FunctionDef*	fFunction;
        CallStmt*	fCall;
        AsmStmt*	fAsmStmt;
        Field*		fField;
        CaseStmt*	fCaseStmt;
        DeclareStmt*	fDeclareStmt;
        LocationNode*	fLocation;
} YYSTYPE;
#line 65 "parse.y"

#include <stdlib.h>
#include "IfStmt.h"
#include "WhileStmt.h"
#include "AsmStmt.h"
#include "DoStmt.h"
#include "RepeatStmt.h"
#include "AssignStmt.h"
#include "TaskStmt.h"
#include "JumpStmt.h"
#include "SwitchStmt.h"
#include "ExprStmt.h"
#include "RCX_Constants.h"
#include "PreProc.h"
#include "parser.h"
#include "Program.h"
#include "parse_util.h"
#include "Program.h"
#include "IncDecExpr.h"
#include "AtomExpr.h"
#include "TypeExpr.h"
#include "Error.h"
#include "MonitorStmt.h"
#include "EventSrcExpr.h"
#include "SensorExpr.h"
#include "AssignMathStmt.h"
#include "ForStmt.h"
#include "RelExpr.h"
#include "NegateExpr.h"
#include "LogicalExpr.h"
#include "TernaryExpr.h"
#include "LabelStmt.h"
#include "GotoStmt.h"
#include "AddrOfExpr.h"
#include "DerefExpr.h"

#define yylex()		(gPreProc->Get(yylval))

static LexLocation sSavedLoc;

#line 155 "parse.y"

static void yyerror(const char *msg);


#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		328
#define	YYFLAG		-32768
#define	YYNTBASE	93

#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 132)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    26,     2,     2,    92,    22,     9,     2,    86,
    35,    20,    19,    87,    18,     2,    21,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     3,    83,    12,
    88,    13,     4,    91,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    89,     2,    90,     8,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    84,     7,    85,    24,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     5,     6,    10,
    11,    14,    15,    16,    17,    23,    25,    27,    28,    29,
    30,    31,    32,    33,    34,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,    10,    14,    18,    25,    32,    35,
    42,    48,    50,    51,    57,    63,    68,    71,    73,    75,
    76,    81,    84,    86,    89,    92,    96,    98,   101,   105,
   109,   111,   113,   117,   120,   126,   130,   131,   136,   139,
   140,   142,   144,   147,   152,   155,   157,   160,   167,   176,
   183,   190,   197,   206,   215,   224,   235,   240,   246,   250,
   255,   262,   266,   269,   271,   275,   279,   283,   285,   286,
   288,   289,   291,   292,   295,   296,   299,   306,   309,   314,
   318,   320,   321,   325,   327,   330,   334,   338,   342,   346,
   350,   354,   358,   362,   366,   370,   374,   378,   382,   386,
   390,   394,   397,   400,   403,   407,   411,   414,   417,   422,
   427,   431,   434,   440,   443,   446,   449,   454,   459,   464,
   467,   475,   481,   485,   492,   496,   497,   498,   502,   504,
   505,   507,   510,   515,   522,   526,   528,   529
};

static const short yyrhs[] = {    94,
     0,    94,    95,     0,     0,    74,   105,    83,     0,   126,
    99,   126,     0,   126,   100,   126,     0,   126,    97,    84,
   110,    85,   126,     0,   126,    96,    84,   110,    85,   126,
     0,   129,    83,     0,    98,    75,    36,    86,   102,    35,
     0,    43,    36,    86,   101,    35,     0,    79,     0,     0,
    42,    36,    86,    35,   108,     0,    43,    36,    86,    35,
   108,     0,   101,    87,   104,    36,     0,   104,    36,     0,
   103,     0,    75,     0,     0,   103,    87,   104,    36,     0,
   104,    36,     0,    74,     0,    76,    74,     0,    74,     9,
     0,    76,    74,     9,     0,    77,     0,    74,    20,     0,
    76,    74,    20,     0,   105,    87,   106,     0,   106,     0,
   107,     0,   107,    88,   124,     0,    36,   126,     0,    36,
   126,    89,   124,    90,     0,    20,    36,   126,     0,     0,
    84,   109,   110,    85,     0,   110,   111,     0,     0,    83,
     0,   108,     0,   121,   111,     0,   126,    36,     3,   111,
     0,     1,    83,     0,   112,     0,   113,   126,     0,    62,
    86,   124,    35,   126,   111,     0,    63,   126,   111,    62,
    86,   124,    35,    83,     0,    65,    86,   124,    35,   126,
   111,     0,    66,    86,   124,    35,   126,   111,     0,    61,
    86,   124,    35,   126,   111,     0,    61,    86,   124,    35,
   126,   111,    33,   111,     0,    69,   126,    86,   124,    35,
   126,   108,   118,     0,    71,   126,    86,   124,    35,   126,
   108,   117,     0,    64,    86,   115,    83,   116,    83,   115,
    35,   126,   111,     0,    72,    36,   125,    83,     0,    73,
    84,   127,    85,    83,     0,   125,    41,    83,     0,    40,
   125,    36,    83,     0,   126,    36,    86,   122,    35,    83,
     0,    74,   105,    83,     0,   114,    83,     0,   124,     0,
   124,    38,   124,     0,   124,    39,   124,     0,   124,    88,
   124,     0,   114,     0,     0,   124,     0,     0,   120,     0,
     0,   118,   119,     0,     0,    70,   108,     0,    70,   126,
    86,   124,    35,   108,     0,    70,   108,     0,   125,    67,
   124,     3,     0,   125,    68,     3,     0,   123,     0,     0,
   123,    87,   124,     0,   124,     0,    37,   125,     0,   124,
    19,   124,     0,   124,    18,   124,     0,   124,    20,   124,
     0,   124,    21,   124,     0,   124,     9,   124,     0,   124,
     7,   124,     0,   124,    22,   124,     0,   124,    16,   124,
     0,   124,    17,   124,     0,   124,     8,   124,     0,   124,
    10,   124,     0,   124,    14,   124,     0,   124,    15,   124,
     0,   124,    11,   124,     0,   124,    12,   124,     0,   124,
    13,   124,     0,    81,   125,     0,    82,   125,     0,    26,
   124,     0,   124,     6,   124,     0,   124,     5,   124,     0,
    18,   124,     0,    24,   124,     0,    28,    86,   124,    35,
     0,    29,    86,   124,    35,     0,    86,   124,    35,     0,
   126,    36,     0,   126,    36,    89,   124,    90,     0,    91,
   124,     0,   124,    27,     0,    27,   124,     0,    77,    86,
   124,    35,     0,    30,    86,   124,    35,     0,    31,    86,
   124,    35,     0,   126,    78,     0,    25,    86,   124,    35,
    89,   124,    90,     0,   124,     4,   124,     3,   124,     0,
   126,     9,    36,     0,   126,     9,    36,    89,   124,    90,
     0,   126,    20,    36,     0,     0,     0,   127,    87,   128,
     0,   128,     0,     0,   124,     0,    92,   124,     0,    92,
   124,     3,   124,     0,    80,   124,    36,    84,   130,    85,
     0,   130,    87,   131,     0,   131,     0,     0,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   163,   167,   168,   171,   172,   173,   174,   175,   176,   180,
   183,   186,   187,   190,   197,   200,   201,   204,   205,   206,
   209,   210,   213,   214,   215,   216,   217,   218,   219,   223,
   224,   227,   228,   231,   232,   233,   236,   236,   239,   240,
   244,   245,   246,   247,   248,   249,   250,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   268,   269,   270,
   271,   272,   273,   277,   278,   279,   280,   284,   285,   288,
   289,   293,   294,   298,   299,   302,   303,   307,   310,   311,
   314,   315,   318,   319,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   345,   346,   348,   349,
   351,   352,   353,   354,   356,   357,   359,   360,   361,   362,
   363,   364,   365,   366,   367,   370,   373,   376,   377,   378,
   382,   383,   384,   388,   391,   392,   393,   396
};

static const char * const yytname[] = {   "$","error","$undefined.","':'","'?'",
"OR","AND","'|'","'^'","'&'","REL_EQ","REL_NE","'<'","'>'","REL_LE","REL_GE",
"LEFT","RIGHT","'-'","'+'","'*'","'/'","'%'","UMINUS","'~'","INDIRECT","'!'",
"INCDEC","ABS","SIGN","TYPE","EVENT_SRC","LOWER_THAN_ELSE","ELSE","LOWER_THAN_EXPR_SHIFT",
"')'","ID","NUMBER","ASSIGN","ASSIGN2","TASKOP","JUMP","TASK","SUB","STRING",
"PP_DEFINE","PP_INCLUDE","NL","WS","PP_ARG","PP_UNKNOWN","PP_IFDEF","PP_IF",
"PP_ELSE","PP_ELIF","PP_ENDIF","PP_UNDEF","PP_PRAGMA","PP_GLOM","PP_ERROR","PP_WARNING",
"IF","WHILE","DO","FOR","REPEAT","SWITCH","CASE","DEFAULT","MONITOR","CATCH",
"ACQUIRE","GOTO","ASM","INT","T_VOID","T_CONST","SENSOR","TASKID","NOLIST","RES",
"CTRUE","CFALSE","';'","'{'","'}'","'('","','","'='","'['","']'","'@'","'$'",
"S","unit_list","unit","function_head","sub_head","nolist_opt","fragment","subfragment",
"sarg_list","args","arg_list","arg_type","var_list","var_item","var_decl","block",
"@1","stmt_list","stmt","control_stmt","misc_stmt","expr_stmt","opt_expr_stmt",
"opt_expr","opt_handler","handler_list","evt_handler","handler","case","params",
"param_list","expr","saveloc","loc","asm_list","asm_item","resource","res_data",
"res_byte",""
};
#endif

static const short yyr1[] = {     0,
    93,    94,    94,    95,    95,    95,    95,    95,    95,    96,
    97,    98,    98,    99,   100,   101,   101,   102,   102,   102,
   103,   103,   104,   104,   104,   104,   104,   104,   104,   105,
   105,   106,   106,   107,   107,   107,   109,   108,   110,   110,
   111,   111,   111,   111,   111,   111,   111,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   113,   113,   113,
   113,   113,   113,   114,   114,   114,   114,   115,   115,   116,
   116,   117,   117,   118,   118,   119,   119,   120,   121,   121,
   122,   122,   123,   123,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   125,   126,   127,   127,   127,
   128,   128,   128,   129,   130,   130,   130,   131
};

static const short yyr2[] = {     0,
     1,     2,     0,     3,     3,     3,     6,     6,     2,     6,
     5,     1,     0,     5,     5,     4,     2,     1,     1,     0,
     4,     2,     1,     2,     2,     3,     1,     2,     3,     3,
     1,     1,     3,     2,     5,     3,     0,     4,     2,     0,
     1,     1,     2,     4,     2,     1,     2,     6,     8,     6,
     6,     6,     8,     8,     8,    10,     4,     5,     3,     4,
     6,     3,     2,     1,     3,     3,     3,     1,     0,     1,
     0,     1,     0,     2,     0,     2,     6,     2,     4,     3,
     1,     0,     3,     1,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     2,     2,     2,     3,     3,     2,     2,     4,     4,
     3,     2,     5,     2,     2,     2,     4,     4,     4,     2,
     7,     5,     3,     6,     3,     0,     0,     3,     1,     0,
     1,     2,     4,     6,     3,     1,     0,     1
};

static const short yydefact[] = {     3,
   127,     0,   127,     2,    13,     0,     0,   127,     0,    31,
    32,   127,   127,     0,   127,   127,     0,     0,     0,     0,
   126,     0,   126,   126,   127,   127,     0,     0,     0,     0,
    12,     0,     0,     0,   127,   127,     9,   127,    34,     4,
     0,   127,   107,   108,   127,   104,   116,   127,   127,   127,
   127,    85,   127,   102,   103,     0,   114,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   115,     0,     0,     0,
   112,   120,     0,     0,    40,    40,     0,     5,     6,    36,
   127,    30,    33,     0,     0,     0,     0,     0,     0,   111,
     0,   106,   105,    91,    95,    90,    96,    99,   100,   101,
    97,    98,    93,    94,    87,    86,    88,    89,    92,   127,
   123,   125,   127,     0,     0,     0,     0,     0,     0,     0,
   109,   110,   118,   119,   117,   127,   138,     0,   136,   127,
     0,     0,     0,    23,     0,    27,     0,     0,     0,   126,
     0,     0,   127,     0,     0,     0,   127,   127,     0,     0,
     0,    41,    37,   127,    42,    39,    46,   127,     0,     0,
    64,     0,     0,   127,    20,    35,   127,   122,   134,   127,
     0,   113,    14,    15,    25,    28,    24,    11,     0,    17,
    45,     0,   127,   127,     0,   127,   127,   127,     0,     0,
   126,   127,     0,    40,     8,    47,    63,    43,   127,   127,
   127,     0,   127,     0,   112,     7,    19,     0,    18,     0,
     0,   135,   124,    26,    29,     0,     0,     0,     0,     0,
    68,     0,     0,     0,   127,   127,     0,   127,   131,     0,
   129,    62,     0,    65,    66,    67,    59,     0,    80,     0,
   127,    10,     0,    22,   121,    16,    60,   127,   127,     0,
   127,   127,   127,     0,     0,    57,   132,     0,   127,    38,
    79,    44,     0,    81,    84,     0,     0,     0,   127,     0,
    70,     0,     0,   127,   127,   127,    58,   128,     0,   127,
    21,    52,    48,     0,   127,    50,    51,     0,     0,   133,
    61,    83,     0,     0,     0,    75,    73,    53,    49,   127,
    54,     0,    55,    72,     0,   127,    74,    78,    56,    76,
     0,   127,     0,     0,    77,     0,     0,     0
};

static const short yydefgoto[] = {   326,
     1,     4,    32,    33,    34,    35,    36,   147,   218,   219,
   148,     9,    10,    11,   165,   204,   126,   166,   167,   168,
   169,   232,   280,   313,   311,   317,   314,   170,   273,   274,
   171,   172,    28,   240,   241,     6,   138,   139
};

static const short yypact[] = {-32768,
    16,    -1,   912,-32768,   -25,   -50,     2,-32768,   -53,-32768,
   -45,   912,   912,   -42,   912,   912,   -34,    -4,    -2,     5,
-32768,    18,-32768,-32768,   912,   912,  1000,    17,    76,    77,
-32768,    34,    35,    48,-32768,-32768,-32768,-32768,    41,-32768,
    -1,   912,   104,   104,   912,   104,   104,   912,   912,   912,
   912,-32768,   912,-32768,-32768,  1033,   104,   912,   912,   912,
   912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
   912,   912,   912,   912,   912,   912,-32768,    54,    96,    99,
    50,-32768,    55,    56,-32768,-32768,   108,-32768,-32768,-32768,
   912,-32768,  1588,  1065,  1097,  1129,  1161,  1193,  1225,-32768,
  1514,  1634,  1655,  1675,   468,   545,   621,   621,   133,   133,
   133,   133,    87,    87,    59,    59,   104,   104,   104,   772,
    57,-32768,   912,   105,     1,   357,   435,    61,   284,    67,
-32768,-32768,-32768,-32768,-32768,   912,  1588,   -60,-32768,   912,
   679,    75,    75,    11,    71,-32768,   -11,   125,    79,-32768,
    78,    80,-32768,    81,    82,    83,-32768,-32768,   127,    88,
    -1,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    90,   591,
   767,   -27,    65,-32768,    51,-32768,   912,  1612,-32768,   912,
   703,-32768,-32768,-32768,-32768,-32768,    12,-32768,    23,-32768,
-32768,   129,   912,   912,   591,   802,   912,   912,    84,    92,
-32768,   193,    15,-32768,-32768,-32768,-32768,-32768,   912,   912,
   912,    93,   912,   176,     3,-32768,-32768,   145,    94,   146,
   727,-32768,-32768,-32768,-32768,   148,   103,  1257,  1289,   126,
-32768,   106,  1321,  1353,   912,   912,   109,   912,  1588,   -36,
-32768,-32768,   513,  1588,  1588,  1588,-32768,  1539,-32768,   591,
   843,-32768,    23,-32768,-32768,-32768,-32768,-32768,-32768,   101,
   871,-32768,-32768,  1385,  1417,-32768,  1564,   110,   733,-32768,
-32768,-32768,   161,   111,  1588,   164,   591,   591,   912,   114,
  1588,   591,   591,-32768,-32768,   912,-32768,-32768,   118,   912,
-32768,   169,-32768,  1449,   886,-32768,-32768,    75,    75,  1588,
-32768,  1588,   591,   120,   170,-32768,   134,-32768,-32768,-32768,
   139,    75,-32768,-32768,   591,    75,-32768,-32768,-32768,-32768,
   128,   912,  1481,    75,-32768,   215,   216,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -160,    64,   185,-32768,  -141,-32768,   -75,  -167,-32768,-32768,
  -192,   -68,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    -3,   -16,    86,-32768,   -41,-32768,-32768,    49
};


#define	YYLAST		1702


static const short yytable[] = {    27,
   183,   184,   208,   231,    52,   250,    54,    55,    43,    44,
   127,    46,    47,   212,   220,    -1,    29,    30,     7,   185,
   224,    56,    57,   188,   179,    79,   180,   230,   226,    40,
   186,   225,    37,    41,     8,   143,    80,    38,    93,   213,
   214,    94,    42,    45,    95,    96,    97,    98,   268,    99,
   269,    48,    81,    31,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,    79,   144,   189,   145,   146,    74,    75,
    76,    49,   272,    50,    80,    77,     5,   129,   251,     2,
    51,   123,   276,    39,    82,     3,   144,   242,   145,   146,
   215,    41,   231,    53,    72,    73,    74,    75,    76,   292,
   293,    83,    84,    77,   296,   297,   137,    85,    86,   141,
    88,    89,    87,    90,   144,   217,   145,   146,   243,    91,
    77,   121,   178,   192,   122,   308,   181,   120,   123,   142,
   124,   125,    82,   128,   187,   140,   175,   319,    70,    71,
    72,    73,    74,    75,    76,   177,   306,   307,   163,    77,
   190,   191,   201,   193,   227,   194,   196,   197,   198,   235,
   318,   202,   207,   221,   320,   247,   137,   236,   249,   252,
   253,   254,   325,   256,   237,   257,   279,   260,   261,   228,
   229,   266,   287,   233,   234,   289,   295,   290,   239,   291,
   301,   303,   309,   312,   310,   244,   245,   246,   316,   248,
    12,   173,   173,   322,   327,   328,    13,    14,    15,    16,
    17,    18,    19,    20,   203,    92,   305,   288,   222,    21,
     0,   264,   265,     0,   267,     0,     0,     0,   195,     0,
     0,     0,   199,   200,     0,     0,     0,   275,     0,   205,
     0,     0,     0,   206,     0,   173,     0,   281,     0,   216,
     0,     0,     0,     0,     0,   239,     0,     0,     0,    22,
     0,     0,     0,    23,    24,   294,     0,  -130,    25,  -130,
   173,     0,   300,    26,   238,     0,   302,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
    77,     0,     0,     0,     0,     0,     0,     0,   323,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   173,     0,
     0,     0,     0,     0,     0,   173,     0,     0,     0,     0,
     0,     0,     0,   277,   278,     0,     0,   282,   283,     0,
     0,     0,     0,     0,     0,     0,     0,   149,     0,     0,
     0,     0,   173,   173,     0,  -127,     0,   173,   173,   298,
   299,     0,     0,   176,    12,     0,  -127,     0,     0,     0,
    13,    14,    15,    16,    17,    18,    19,    20,   173,     0,
     0,     0,  -127,    21,     0,   315,   150,  -126,     0,     0,
   173,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
   154,   155,   156,  -126,  -126,   157,     0,   158,   159,   160,
   161,     0,     0,    22,  -127,   149,     0,    23,    24,   162,
   163,   164,    25,  -127,     0,     0,     0,    26,     0,     0,
     0,     0,    12,     0,  -127,     0,     0,     0,    13,    14,
    15,    16,    17,    18,    19,    20,     0,     0,     0,     0,
  -127,    21,     0,     0,   150,  -126,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     0,     0,     0,     0,    77,   151,   152,   153,   154,   155,
   156,  -126,  -126,   157,     0,   158,   159,   160,   161,     0,
     0,    22,  -127,   149,     0,    23,    24,   162,   163,   174,
    25,  -127,     0,     0,     0,    26,     0,     0,     0,     0,
    12,     0,  -127,     0,     0,     0,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,     0,     0,  -127,    21,
     0,     0,   150,  -126,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77,     0,   151,   152,   153,   154,   155,   156,  -126,
  -126,   157,     0,   158,   159,   160,   161,     0,     0,    22,
  -127,   149,     0,    23,    24,   162,   163,   270,    25,  -127,
     0,     0,     0,    26,     0,     0,     0,     0,    12,     0,
  -127,     0,     0,     0,    13,    14,    15,    16,    17,    18,
    19,    20,     0,     0,     0,     0,  -127,    21,     0,     0,
   150,  -126,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,    77,     0,     0,
     0,   151,   152,   153,   154,   155,   156,  -126,  -126,   157,
     0,   158,   159,   160,   161,     0,     0,    22,  -127,     0,
     0,    23,    24,   162,   163,     0,    25,     0,     0,     0,
     0,    26,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,    77,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,    77,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
    12,     0,     0,    77,     0,     0,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,     0,     0,   182,    21,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    12,
     0,     0,   223,    77,     0,    13,    14,    15,    16,    17,
    18,    19,    20,     0,   209,   210,     0,     0,    21,    22,
     0,     0,     0,    23,    24,     0,   255,     0,    25,    12,
     0,     0,     0,    26,   238,    13,    14,    15,    16,    17,
    18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,    23,    24,   211,     0,  -137,    25,  -137,     0,
    12,     0,    26,     0,     0,     0,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,     0,   -82,    22,    21,
     0,     0,    23,    24,   -69,     0,     0,    25,    12,     0,
     0,     0,    26,     0,    13,    14,    15,    16,    17,    18,
    19,    20,     0,    12,     0,     0,     0,    21,     0,    13,
    14,    15,    16,    17,    18,    19,    20,     0,     0,    22,
   -69,     0,    21,    23,    24,     0,     0,     0,    25,    12,
     0,     0,     0,    26,     0,    13,    14,    15,    16,    17,
    18,    19,    20,     0,     0,     0,     0,    22,    21,     0,
     0,    23,    24,   -71,     0,     0,    25,     0,     0,     0,
     0,    26,    22,     0,     0,     0,    23,    24,     0,     0,
     0,    25,     0,     0,     0,     0,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,    23,    24,     0,     0,     0,    25,     0,     0,
     0,     0,    26,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     0,     0,     0,     0,    77,     0,     0,     0,
     0,     0,     0,     0,     0,    78,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,    77,
     0,     0,     0,     0,     0,     0,     0,   100,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77,     0,     0,     0,     0,     0,     0,     0,   130,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,    77,     0,     0,     0,     0,     0,     0,
     0,   131,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,    77,     0,     0,     0,     0,
     0,     0,     0,   132,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,    77,     0,     0,
     0,     0,     0,     0,     0,   133,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,    77,
     0,     0,     0,     0,     0,     0,     0,   134,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77,     0,     0,     0,     0,     0,     0,     0,   135,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,    77,     0,     0,     0,     0,     0,     0,
     0,   258,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,    77,     0,     0,     0,     0,
     0,     0,     0,   259,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,    77,     0,     0,
     0,     0,     0,     0,     0,   262,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,    77,
     0,     0,     0,     0,     0,     0,     0,   263,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77,     0,     0,     0,     0,     0,     0,     0,   284,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,    77,     0,     0,     0,     0,     0,     0,
     0,   285,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,    77,     0,     0,     0,     0,
     0,     0,     0,   304,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,    77,     0,     0,
     0,     0,     0,     0,     0,   324,   136,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
    77,   271,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,    77,   286,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
    77,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     0,     0,     0,     0,    77,-32768,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     0,     0,     0,     0,    77,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
    77,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,    77
};

static const short yycheck[] = {     3,
   142,   143,   170,   196,    21,     3,    23,    24,    12,    13,
    86,    15,    16,    41,   175,     0,    42,    43,    20,     9,
     9,    25,    26,    35,    85,     9,    87,   195,   189,    83,
    20,    20,    83,    87,    36,    35,    20,    36,    42,    67,
    68,    45,    88,    86,    48,    49,    50,    51,    85,    53,
    87,    86,    36,    79,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     9,    74,    87,    76,    77,    20,    21,
    22,    86,   250,    86,    20,    27,     1,    91,    86,    74,
    86,    89,   253,     8,    78,    80,    74,    83,    76,    77,
    36,    87,   295,    86,    18,    19,    20,    21,    22,   277,
   278,    36,    36,    27,   282,   283,   120,    84,    84,   123,
    35,    36,    75,    38,    74,    75,    76,    77,   204,    89,
    27,    36,   136,   150,    36,   303,   140,    84,    89,    35,
    86,    86,    78,    36,    74,    89,    86,   315,    16,    17,
    18,    19,    20,    21,    22,    89,   298,   299,    84,    27,
    36,    83,    36,    86,    36,    86,    86,    86,    86,    86,
   312,    84,    83,   177,   316,    83,   180,    86,     3,    35,
    87,    36,   324,    36,   201,    83,    86,    62,    83,   193,
   194,    83,    83,   197,   198,    35,    83,    87,   202,    36,
    83,    33,    83,    70,    35,   209,   210,   211,    70,   213,
    18,   126,   127,    86,     0,     0,    24,    25,    26,    27,
    28,    29,    30,    31,   161,    41,   295,   269,   180,    37,
    -1,   235,   236,    -1,   238,    -1,    -1,    -1,   153,    -1,
    -1,    -1,   157,   158,    -1,    -1,    -1,   251,    -1,   164,
    -1,    -1,    -1,   168,    -1,   170,    -1,   261,    -1,   174,
    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,    77,
    -1,    -1,    -1,    81,    82,   279,    -1,    85,    86,    87,
   195,    -1,   286,    91,    92,    -1,   290,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
    -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   258,   259,    -1,    -1,   262,   263,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    -1,    -1,   277,   278,    -1,     9,    -1,   282,   283,   284,
   285,    -1,    -1,    90,    18,    -1,    20,    -1,    -1,    -1,
    24,    25,    26,    27,    28,    29,    30,    31,   303,    -1,
    -1,    -1,    36,    37,    -1,   310,    40,    41,    -1,    -1,
   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
    74,    -1,    -1,    77,    78,     1,    -1,    81,    82,    83,
    84,    85,    86,     9,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    18,    -1,    20,    -1,    -1,    -1,    24,    25,
    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
    36,    37,    -1,    -1,    40,    41,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    -1,    -1,    -1,    -1,    27,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    -1,    71,    72,    73,    74,    -1,
    -1,    77,    78,     1,    -1,    81,    82,    83,    84,    85,
    86,     9,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
    18,    -1,    20,    -1,    -1,    -1,    24,    25,    26,    27,
    28,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    37,
    -1,    -1,    40,    41,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27,    -1,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    -1,    71,    72,    73,    74,    -1,    -1,    77,
    78,     1,    -1,    81,    82,    83,    84,    85,    86,     9,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    18,    -1,
    20,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
    30,    31,    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,
    40,    41,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    -1,    71,    72,    73,    74,    -1,    -1,    77,    78,    -1,
    -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,
    -1,    91,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    27,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    18,    -1,    -1,    27,    -1,    -1,    24,    25,    26,    27,
    28,    29,    30,    31,    -1,    -1,    -1,    -1,    90,    37,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    18,
    -1,    -1,    90,    27,    -1,    24,    25,    26,    27,    28,
    29,    30,    31,    -1,    38,    39,    -1,    -1,    37,    77,
    -1,    -1,    -1,    81,    82,    -1,    90,    -1,    86,    18,
    -1,    -1,    -1,    91,    92,    24,    25,    26,    27,    28,
    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
    -1,    -1,    81,    82,    88,    -1,    85,    86,    87,    -1,
    18,    -1,    91,    -1,    -1,    -1,    24,    25,    26,    27,
    28,    29,    30,    31,    -1,    -1,    -1,    35,    77,    37,
    -1,    -1,    81,    82,    83,    -1,    -1,    86,    18,    -1,
    -1,    -1,    91,    -1,    24,    25,    26,    27,    28,    29,
    30,    31,    -1,    18,    -1,    -1,    -1,    37,    -1,    24,
    25,    26,    27,    28,    29,    30,    31,    -1,    -1,    77,
    35,    -1,    37,    81,    82,    -1,    -1,    -1,    86,    18,
    -1,    -1,    -1,    91,    -1,    24,    25,    26,    27,    28,
    29,    30,    31,    -1,    -1,    -1,    -1,    77,    37,    -1,
    -1,    81,    82,    83,    -1,    -1,    86,    -1,    -1,    -1,
    -1,    91,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
    -1,    -1,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
    -1,    -1,    91,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    36,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    35,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    35,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    35,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    35,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    35,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    35,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    27,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    27,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    -1,    -1,    -1,    -1,    27,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    -1,    -1,    -1,    -1,    27,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    27,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    -1,    27
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#include <malloc.h>
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
                                /*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
                                /*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
                                /*  semantic values from the action	*/
                                /*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
         the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
         but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
                 &yyss1, size * sizeof (*yyssp),
                 &yyvs1, size * sizeof (*yyvsp),
                 &yyls1, size * sizeof (*yylsp),
                 &yystacksize);
#else
      yyoverflow("parser stack overflow",
                 &yyss1, size * sizeof (*yyssp),
                 &yyvs1, size * sizeof (*yyvsp),
                 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
        {
          yyerror("parser stack overflow");
          return 2;
        }
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
        yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
        fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
        YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
        fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
        fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
        {
          fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
          /* Give the individual parser a way to print the precise meaning
             of a token, for further debugging info.  */
#ifdef YYPRINT
          YYPRINT (stderr, yychar, yylval);
#endif
          fprintf (stderr, ")\n");
        }
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
               yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
        fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 163 "parse.y"
{ yyval.fInt = 0; ;
    break;}
case 4:
#line 171 "parse.y"
{ gProgram->AddGlobalDecls(yyvsp[-1].fBlock); ;
    break;}
case 5:
#line 172 "parse.y"
{ yyvsp[-1].fFragment->SetLocations(yyvsp[-2].fLocation, yyvsp[0].fLocation); ;
    break;}
case 6:
#line 173 "parse.y"
{ yyvsp[-1].fFragment->SetLocations(yyvsp[-2].fLocation, yyvsp[0].fLocation); ;
    break;}
case 7:
#line 174 "parse.y"
{ EndSubWithParams(yyvsp[-4].fFragment, yyvsp[-2].fBlock, yyvsp[-5].fLocation, yyvsp[0].fLocation); ;
    break;}
case 8:
#line 175 "parse.y"
{ EndFunction(yyvsp[-4].fFunction, yyvsp[-2].fBlock, yyvsp[-5].fLocation, yyvsp[0].fLocation); ;
    break;}
case 9:
#line 176 "parse.y"
{ gProgram->AddResource(yyvsp[-1].fResource); ;
    break;}
case 10:
#line 180 "parse.y"
{ yyval.fFunction = BeginFunction(yyvsp[-1].fFunction, yyvsp[-3].fSymbol, yyvsp[-5].fBool); ;
    break;}
case 11:
#line 183 "parse.y"
{ yyval.fFragment = BeginSubWithParams(yyvsp[-1].fFragment, yyvsp[-3].fSymbol); ;
    break;}
case 12:
#line 186 "parse.y"
{ yyval.fBool = 0; ;
    break;}
case 13:
#line 187 "parse.y"
{ yyval.fBool = 1; ;
    break;}
case 14:
#line 190 "parse.y"
{ yyval.fFragment = new Fragment(true, yyvsp[-3].fSymbol, yyvsp[0].fStmt); ;
    break;}
case 15:
#line 197 "parse.y"
{ yyval.fFragment = new Fragment(false, yyvsp[-3].fSymbol, yyvsp[0].fStmt); ;
    break;}
case 16:
#line 200 "parse.y"
{ yyval.fFragment = yyvsp[-3].fFragment; 	DefineSubArg(yyval.fFragment, yyvsp[0].fSymbol, yyvsp[-1].fInt); ;
    break;}
case 17:
#line 201 "parse.y"
{ yyval.fFragment = new Fragment(false); DefineSubArg(yyval.fFragment,yyvsp[0].fSymbol,yyvsp[-1].fInt); ;
    break;}
case 19:
#line 205 "parse.y"
{ yyval.fFunction = new FunctionDef(); ;
    break;}
case 20:
#line 206 "parse.y"
{ yyval.fFunction = new FunctionDef(); ;
    break;}
case 21:
#line 209 "parse.y"
{ yyval.fFunction = yyvsp[-3].fFunction; 	DefineArg(yyval.fFunction, yyvsp[0].fSymbol, yyvsp[-1].fInt); ;
    break;}
case 22:
#line 210 "parse.y"
{ yyval.fFunction = new FunctionDef(); DefineArg(yyval.fFunction,yyvsp[0].fSymbol,yyvsp[-1].fInt); ;
    break;}
case 23:
#line 213 "parse.y"
{ yyval.fInt = FunctionDef::kIntegerArg; ;
    break;}
case 24:
#line 214 "parse.y"
{ yyval.fInt = FunctionDef::kConstantArg; ;
    break;}
case 25:
#line 215 "parse.y"
{ yyval.fInt = FunctionDef::kReferenceArg; ;
    break;}
case 26:
#line 216 "parse.y"
{ yyval.fInt = FunctionDef::kConstRefArg; ;
    break;}
case 27:
#line 217 "parse.y"
{ yyval.fInt = FunctionDef::kSensorArg; ;
    break;}
case 28:
#line 218 "parse.y"
{ yyval.fInt = FunctionDef::kPointerArg; ;
    break;}
case 29:
#line 219 "parse.y"
{ yyval.fInt = FunctionDef::kConstPtrArg; ;
    break;}
case 30:
#line 223 "parse.y"
{ yyvsp[-2].fBlock->Add(yyvsp[0].fStmt); yyval.fBlock = yyvsp[-2].fBlock; ;
    break;}
case 31:
#line 224 "parse.y"
{ yyval.fBlock = new BlockStmt(); yyval.fBlock->Add(yyvsp[0].fStmt); ;
    break;}
case 32:
#line 227 "parse.y"
{ yyval.fStmt = yyvsp[0].fDeclareStmt; ;
    break;}
case 33:
#line 228 "parse.y"
{ yyval.fStmt = yyvsp[-2].fDeclareStmt; yyvsp[-2].fDeclareStmt->SetInitialValue(yyvsp[0].fExpr); ;
    break;}
case 34:
#line 231 "parse.y"
{ yyval.fDeclareStmt = MakeDeclareStmt(yyvsp[-1].fSymbol, yyvsp[0].fLocation, 0, false, false); ;
    break;}
case 35:
#line 232 "parse.y"
{ yyval.fDeclareStmt = MakeDeclareStmt(yyvsp[-4].fSymbol, yyvsp[-3].fLocation, yyvsp[-1].fExpr, false, false); ;
    break;}
case 36:
#line 233 "parse.y"
{ yyval.fDeclareStmt = MakeDeclareStmt(yyvsp[-1].fSymbol, yyvsp[0].fLocation, 0, true, false); ;
    break;}
case 37:
#line 236 "parse.y"
{ BeginScope(); ;
    break;}
case 38:
#line 236 "parse.y"
{ yyval.fStmt = EndScope(yyvsp[-1].fBlock); ;
    break;}
case 39:
#line 239 "parse.y"
{ yyvsp[-1].fBlock->Add(yyvsp[0].fStmt); yyval.fBlock = yyvsp[-1].fBlock; ;
    break;}
case 40:
#line 240 "parse.y"
{ yyval.fBlock = new BlockStmt(); ;
    break;}
case 41:
#line 244 "parse.y"
{ yyval.fStmt = new BlockStmt(); ;
    break;}
case 43:
#line 246 "parse.y"
{ yyval.fStmt = yyvsp[-1].fCaseStmt; yyvsp[-1].fCaseStmt->SetStmt(yyvsp[0].fStmt); ;
    break;}
case 44:
#line 247 "parse.y"
{ yyval.fStmt = new LabelStmt(yyvsp[-2].fSymbol, yyvsp[-3].fLocation->GetLoc(), yyvsp[0].fStmt); delete yyvsp[-3].fLocation; ;
    break;}
case 45:
#line 248 "parse.y"
{  yyerrok; yyval.fStmt = new BlockStmt(); ;
    break;}
case 47:
#line 250 "parse.y"
{ yyvsp[-1].fStmt->SetLocation(yyvsp[0].fLocation); ;
    break;}
case 48:
#line 255 "parse.y"
{ yyval.fStmt = new WhileStmt(yyvsp[-3].fExpr, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-1].fLocation); ;
    break;}
case 49:
#line 256 "parse.y"
{ yyval.fStmt = new DoStmt(yyvsp[-2].fExpr, yyvsp[-5].fStmt); yyval.fStmt->SetLocation(yyvsp[-6].fLocation); ;
    break;}
case 50:
#line 257 "parse.y"
{ yyval.fStmt = new RepeatStmt(yyvsp[-3].fExpr, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-1].fLocation); ;
    break;}
case 51:
#line 258 "parse.y"
{ yyval.fStmt = new SwitchStmt(yyvsp[-3].fExpr, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-1].fLocation); ;
    break;}
case 52:
#line 259 "parse.y"
{ yyval.fStmt = new IfStmt(yyvsp[-3].fExpr, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-1].fLocation); ;
    break;}
case 53:
#line 260 "parse.y"
{ yyval.fStmt = new IfStmt(yyvsp[-5].fExpr, yyvsp[-2].fStmt, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-3].fLocation); ;
    break;}
case 54:
#line 261 "parse.y"
{ yyval.fStmt = new MonitorStmt(yyvsp[-4].fExpr, yyvsp[-1].fStmt, yyvsp[0].fBlock, yyvsp[-6].fLocation->GetLoc()); delete yyvsp[-6].fLocation; yyval.fStmt->SetLocation(yyvsp[-2].fLocation); ;
    break;}
case 55:
#line 262 "parse.y"
{ yyval.fStmt = MakeAcquireStmt(yyvsp[-4].fExpr, yyvsp[-1].fStmt, yyvsp[0].fStmt, yyvsp[-6].fLocation); yyval.fStmt->SetLocation(yyvsp[-2].fLocation); ;
    break;}
case 56:
#line 263 "parse.y"
{ yyval.fStmt = new ForStmt(yyvsp[-7].fStmt, yyvsp[-5].fExpr, yyvsp[-3].fStmt, yyvsp[0].fStmt); yyval.fStmt->SetLocation(yyvsp[-1].fLocation); ;
    break;}
case 57:
#line 264 "parse.y"
{ yyval.fStmt = new GotoStmt(yyvsp[-2].fSymbol, sSavedLoc); ;
    break;}
case 58:
#line 268 "parse.y"
{ yyval.fStmt = yyvsp[-2].fAsmStmt; ;
    break;}
case 59:
#line 269 "parse.y"
{ yyval.fStmt = new JumpStmt(yyvsp[-1].fInt, sSavedLoc); ;
    break;}
case 60:
#line 270 "parse.y"
{ yyval.fStmt = new TaskStmt((UByte)yyvsp[-3].fInt, yyvsp[-1].fSymbol, sSavedLoc); ;
    break;}
case 61:
#line 271 "parse.y"
{ yyval.fStmt = yyvsp[-2].fCall; yyvsp[-2].fCall->SetName(yyvsp[-4].fSymbol); yyvsp[-2].fCall->SetLocation(yyvsp[-5].fLocation->GetLoc()); delete yyvsp[-5].fLocation; ;
    break;}
case 62:
#line 272 "parse.y"
{ yyval.fStmt = yyvsp[-1].fBlock; ;
    break;}
case 64:
#line 277 "parse.y"
{ yyval.fStmt = new ExprStmt(yyvsp[0].fExpr); ;
    break;}
case 65:
#line 278 "parse.y"
{ CheckLValue(yyvsp[-2].fExpr); yyval.fStmt = MakeAssignStmt(yyvsp[-2].fExpr, yyvsp[-1].fInt, yyvsp[0].fExpr); ;
    break;}
case 66:
#line 279 "parse.y"
{ CheckLValue(yyvsp[-2].fExpr); yyval.fStmt = MakeAssign2Stmt(yyvsp[-2].fExpr, yyvsp[-1].fInt, yyvsp[0].fExpr); ;
    break;}
case 67:
#line 280 "parse.y"
{ CheckLValue(yyvsp[-2].fExpr); yyval.fStmt = new AssignStmt(yyvsp[-2].fExpr, yyvsp[0].fExpr); ;
    break;}
case 69:
#line 285 "parse.y"
{ yyval.fStmt = 0; ;
    break;}
case 71:
#line 289 "parse.y"
{ yyval.fExpr = 0; ;
    break;}
case 73:
#line 294 "parse.y"
{ yyval.fStmt = 0; ;
    break;}
case 74:
#line 298 "parse.y"
{ yyvsp[-1].fBlock->Add(yyvsp[0].fStmt); yyval.fBlock = yyvsp[-1].fBlock; ;
    break;}
case 75:
#line 299 "parse.y"
{ yyval.fBlock =  new BlockStmt(); ;
    break;}
case 76:
#line 302 "parse.y"
{ yyval.fStmt = yyvsp[0].fStmt; ;
    break;}
case 77:
#line 303 "parse.y"
{ yyval.fStmt = MakeCatchStmt(yyvsp[-2].fExpr, yyvsp[0].fStmt, yyvsp[-4].fLocation); ;
    break;}
case 78:
#line 307 "parse.y"
{ yyval.fStmt = yyvsp[0].fStmt; ;
    break;}
case 79:
#line 310 "parse.y"
{ yyval.fCaseStmt = MakeCaseStmt(yyvsp[-1].fExpr, sSavedLoc); ;
    break;}
case 80:
#line 311 "parse.y"
{ yyval.fCaseStmt = new CaseStmt(CaseStmt::kDefaultValue, sSavedLoc); ;
    break;}
case 82:
#line 315 "parse.y"
{ yyval.fCall = new CallStmt(); ;
    break;}
case 83:
#line 318 "parse.y"
{ yyval.fCall = yyvsp[-2].fCall; yyval.fCall->AddParam(yyvsp[0].fExpr); ;
    break;}
case 84:
#line 319 "parse.y"
{ yyval.fCall = new CallStmt(); yyval.fCall->AddParam(yyvsp[0].fExpr); ;
    break;}
case 85:
#line 322 "parse.y"
{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, yyvsp[-1].fInt, sSavedLoc); ;
    break;}
case 86:
#line 323 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '+', yyvsp[0].fExpr); ;
    break;}
case 87:
#line 324 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '-', yyvsp[0].fExpr); ;
    break;}
case 88:
#line 325 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '*', yyvsp[0].fExpr); ;
    break;}
case 89:
#line 326 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '/', yyvsp[0].fExpr); ;
    break;}
case 90:
#line 327 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '&', yyvsp[0].fExpr); ;
    break;}
case 91:
#line 328 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '|', yyvsp[0].fExpr); ;
    break;}
case 92:
#line 329 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '%', yyvsp[0].fExpr); ;
    break;}
case 93:
#line 330 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, LEFT, yyvsp[0].fExpr); ;
    break;}
case 94:
#line 331 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, RIGHT, yyvsp[0].fExpr); ;
    break;}
case 95:
#line 332 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(yyvsp[-2].fExpr, '^', yyvsp[0].fExpr); ;
    break;}
case 96:
#line 333 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kEqualTo, yyvsp[0].fExpr); ;
    break;}
case 97:
#line 334 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kLessOrEqual, yyvsp[0].fExpr); ;
    break;}
case 98:
#line 335 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kGreaterOrEqual, yyvsp[0].fExpr); ;
    break;}
case 99:
#line 336 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kNotEqualTo, yyvsp[0].fExpr); ;
    break;}
case 100:
#line 337 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kLessThan, yyvsp[0].fExpr); ;
    break;}
case 101:
#line 338 "parse.y"
{ yyval.fExpr = new RelExpr(yyvsp[-2].fExpr, RelExpr::kGreaterThan, yyvsp[0].fExpr); ;
    break;}
case 102:
#line 339 "parse.y"
{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, 1, sSavedLoc); ;
    break;}
case 103:
#line 340 "parse.y"
{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, 0, sSavedLoc); ;
    break;}
case 104:
#line 341 "parse.y"
{ yyval.fExpr = new NegateExpr(yyvsp[0].fExpr); ;
    break;}
case 105:
#line 342 "parse.y"
{ yyval.fExpr = new LogicalExpr(yyvsp[-2].fExpr, LogicalExpr::kLogicalAnd, yyvsp[0].fExpr); ;
    break;}
case 106:
#line 343 "parse.y"
{ yyval.fExpr = new LogicalExpr(yyvsp[-2].fExpr, LogicalExpr::kLogicalOr, yyvsp[0].fExpr); ;
    break;}
case 107:
#line 345 "parse.y"
{ yyval.fExpr = MakeBinaryExpr(new AtomExpr(kRCX_ConstantType, 0, yyvsp[0].fExpr->GetLoc()), '-', yyvsp[0].fExpr); ;
    break;}
case 108:
#line 346 "parse.y"
{ yyval.fExpr = MakeUnaryExpr('~', yyvsp[0].fExpr); ;
    break;}
case 109:
#line 348 "parse.y"
{ yyval.fExpr = MakeUnaryExpr(ABS, yyvsp[-1].fExpr); ;
    break;}
case 110:
#line 349 "parse.y"
{ yyval.fExpr = MakeUnaryExpr(SIGN, yyvsp[-1].fExpr); ;
    break;}
case 111:
#line 351 "parse.y"
{ yyval.fExpr = yyvsp[-1].fExpr; ;
    break;}
case 112:
#line 352 "parse.y"
{ yyval.fExpr = MakeVarExpr(yyvsp[0].fSymbol, yyvsp[-1].fLocation); ;
    break;}
case 113:
#line 353 "parse.y"
{ yyval.fExpr = MakeArrayExpr(yyvsp[-3].fSymbol, yyvsp[-4].fLocation, yyvsp[-1].fExpr); ;
    break;}
case 114:
#line 354 "parse.y"
{ yyval.fExpr = MakeValueExpr(yyvsp[0].fExpr); ;
    break;}
case 115:
#line 356 "parse.y"
{ yyval.fExpr = MakeIncDecExpr(yyvsp[-1].fExpr, yyvsp[0].fInt, false, yyvsp[-1].fExpr->GetLoc()); ;
    break;}
case 116:
#line 357 "parse.y"
{ yyval.fExpr = MakeIncDecExpr(yyvsp[0].fExpr, yyvsp[-1].fInt, true, yyvsp[0].fExpr->GetLoc()); ;
    break;}
case 117:
#line 359 "parse.y"
{ yyval.fExpr = new SensorExpr(yyvsp[-1].fExpr); ;
    break;}
case 118:
#line 360 "parse.y"
{ yyval.fExpr = new TypeExpr(yyvsp[-1].fExpr); ;
    break;}
case 119:
#line 361 "parse.y"
{ yyval.fExpr = new EventSrcExpr(yyvsp[-1].fExpr, gProgram->GetTarget()->fType); ;
    break;}
case 120:
#line 362 "parse.y"
{ yyval.fExpr = MakeTaskIdExpr(yyvsp[-1].fLocation); ;
    break;}
case 121:
#line 363 "parse.y"
{ yyval.fExpr = MakeIndirectExpr(yyvsp[-4].fExpr, yyvsp[-1].fExpr); ;
    break;}
case 122:
#line 364 "parse.y"
{ yyval.fExpr = new TernaryExpr(yyvsp[-4].fExpr, yyvsp[-2].fExpr, yyvsp[0].fExpr); ;
    break;}
case 123:
#line 365 "parse.y"
{ yyval.fExpr = MakeAddrOfExpr(yyvsp[0].fSymbol, yyvsp[-2].fLocation, (Expr *)0); ;
    break;}
case 124:
#line 366 "parse.y"
{ yyval.fExpr = MakeAddrOfExpr(yyvsp[-3].fSymbol, yyvsp[-5].fLocation, yyvsp[-1].fExpr); ;
    break;}
case 125:
#line 367 "parse.y"
{ yyval.fExpr = MakeDerefExpr(yyvsp[0].fSymbol, yyvsp[-2].fLocation); ;
    break;}
case 126:
#line 370 "parse.y"
{ LexCurrentLocation(sSavedLoc); ;
    break;}
case 127:
#line 373 "parse.y"
{ yyval.fLocation = new LocationNode(); ;
    break;}
case 128:
#line 376 "parse.y"
{ yyval.fAsmStmt = yyvsp[-2].fAsmStmt; yyvsp[-2].fAsmStmt->Add(yyvsp[0].fField); ;
    break;}
case 129:
#line 377 "parse.y"
{ yyval.fAsmStmt = new AsmStmt(); yyval.fAsmStmt->Add(yyvsp[0].fField); ;
    break;}
case 130:
#line 378 "parse.y"
{ yyval.fAsmStmt = new AsmStmt(); ;
    break;}
case 131:
#line 382 "parse.y"
{ yyval.fField = MakeConstField(yyvsp[0].fExpr); ;
    break;}
case 132:
#line 383 "parse.y"
{ yyval.fField = new EAField(yyvsp[0].fExpr); ;
    break;}
case 133:
#line 384 "parse.y"
{ yyval.fField = new EAField(yyvsp[-2].fExpr, GetConstantValue(yyvsp[0].fExpr)); ;
    break;}
case 134:
#line 388 "parse.y"
{ yyval.fResource=yyvsp[-1].fResource; yyvsp[-1].fResource->SetInfo((RCX_ChunkType)GetConstantValue(yyvsp[-4].fExpr), yyvsp[-3].fSymbol); ;
    break;}
case 135:
#line 391 "parse.y"
{ yyval.fResource = yyvsp[-2].fResource; yyvsp[-2].fResource->Add(yyvsp[0].fInt); ;
    break;}
case 136:
#line 392 "parse.y"
{ yyval.fResource = new Resource(); yyval.fResource->Add(yyvsp[0].fInt); ;
    break;}
case 137:
#line 393 "parse.y"
{ yyval.fResource = new Resource(); ;
    break;}
case 138:
#line 396 "parse.y"
{ yyval.fInt = GetConstantValue(yyvsp[0].fExpr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
        fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
        {
          int size = 0;
          char *msg;
          int x, count;

          count = 0;
          /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
          for (x = (yyn < 0 ? -yyn : 0);
               x < (sizeof(yytname) / sizeof(char *)); x++)
            if (yycheck[x + yyn] == x)
              size += strlen(yytname[x]) + 15, count++;
          msg = (char *) malloc(size + 15);
          if (msg != 0)
            {
              strcpy(msg, "parse error");

              if (count < 5)
                {
                  count = 0;
                  for (x = (yyn < 0 ? -yyn : 0);
                       x < (sizeof(yytname) / sizeof(char *)); x++)
                    if (yycheck[x + yyn] == x)
                      {
                        strcat(msg, count == 0 ? ", expecting `" : " or `");
                        strcat(msg, yytname[x]);
                        strcat(msg, "'");
                        count++;
                      }
                }
              yyerror(msg);
              free(msg);
            }
          else
            yyerror ("parse error; also virtual memory exceeded");
        }
      else
#endif /* YYERROR_VERBOSE */
        yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
        YYABORT;

#if YYDEBUG != 0
      if (yydebug)
        fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
        fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
        goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 400 "parse.y"



void yyerror(const char *msg)
{
        Error(kErr_Parser, msg).RaiseLex();
}

